// Code generated by protoc-gen-go. DO NOT EDIT.
// source: qrl.proto

/*
Package qrl is a generated protocol buffer package.

It is generated from these files:
	qrl.proto

It has these top-level messages:
	Empty
	GetNodeStateReq
	GetNodeStateResp
	GetKnownPeersReq
	GetKnownPeersResp
	GetBlockReq
	GetBlockResp
	GetStatsReq
	GetStatsResp
	GetAddressFromPKReq
	GetAddressFromPKResp
	BlockDataPoint
	GetAddressStateReq
	GetAddressStateResp
	GetObjectReq
	GetObjectResp
	GetLatestDataReq
	GetLatestDataResp
	TransferCoinsReq
	TransferCoinsResp
	PushTransactionReq
	PushTransactionResp
	TokenTxnReq
	TransferTokenTxnReq
	SlaveTxnReq
	LatticePublicKeyTxnReq
	GetLocalAddressesReq
	GetLocalAddressesResp
	NodeInfo
	StoredPeers
	Peer
	AddressState
	LatticePK
	AddressAmount
	BlockHeader
	BlockHeaderExtended
	TransactionCount
	TransactionExtended
	BlockExtended
	Block
	GenesisBalance
	BlockMetaDataList
	Transaction
	TokenList
	TokenDetailedList
	TokenMetadata
	CollectEphemeralMessageReq
	CollectEphemeralMessageResp
	PushEphemeralMessageReq
	EncryptedEphemeralMessage
	EphemeralChannelPayload
	EphemeralMessagePayload
	LatticePublicKeys
	EphemeralMetadata
	AddressList
	BlockHeightData
	BlockMetaData
	BlockNumberMapping
	StateLoader
	StateObjects
	LRUStateCache
	NodeChainState
	NodeHeaderHash
	P2PAcknowledgement
	PeerInfo
	Peers
*/
package qrl

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetLatestDataReq_Filter int32

const (
	GetLatestDataReq_ALL                      GetLatestDataReq_Filter = 0
	GetLatestDataReq_BLOCKHEADERS             GetLatestDataReq_Filter = 1
	GetLatestDataReq_TRANSACTIONS             GetLatestDataReq_Filter = 2
	GetLatestDataReq_TRANSACTIONS_UNCONFIRMED GetLatestDataReq_Filter = 3
)

var GetLatestDataReq_Filter_name = map[int32]string{
	0: "ALL",
	1: "BLOCKHEADERS",
	2: "TRANSACTIONS",
	3: "TRANSACTIONS_UNCONFIRMED",
}
var GetLatestDataReq_Filter_value = map[string]int32{
	"ALL":                      0,
	"BLOCKHEADERS":             1,
	"TRANSACTIONS":             2,
	"TRANSACTIONS_UNCONFIRMED": 3,
}

func (x GetLatestDataReq_Filter) String() string {
	return proto.EnumName(GetLatestDataReq_Filter_name, int32(x))
}
func (GetLatestDataReq_Filter) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{16, 0} }

type PushTransactionResp_ResponseCode int32

const (
	PushTransactionResp_UNKNOWN           PushTransactionResp_ResponseCode = 0
	PushTransactionResp_ERROR             PushTransactionResp_ResponseCode = 1
	PushTransactionResp_VALIDATION_FAILED PushTransactionResp_ResponseCode = 2
	PushTransactionResp_SUBMITTED         PushTransactionResp_ResponseCode = 3
)

var PushTransactionResp_ResponseCode_name = map[int32]string{
	0: "UNKNOWN",
	1: "ERROR",
	2: "VALIDATION_FAILED",
	3: "SUBMITTED",
}
var PushTransactionResp_ResponseCode_value = map[string]int32{
	"UNKNOWN":           0,
	"ERROR":             1,
	"VALIDATION_FAILED": 2,
	"SUBMITTED":         3,
}

func (x PushTransactionResp_ResponseCode) String() string {
	return proto.EnumName(PushTransactionResp_ResponseCode_name, int32(x))
}
func (PushTransactionResp_ResponseCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{21, 0}
}

type NodeInfo_State int32

const (
	NodeInfo_UNKNOWN  NodeInfo_State = 0
	NodeInfo_UNSYNCED NodeInfo_State = 1
	NodeInfo_SYNCING  NodeInfo_State = 2
	NodeInfo_SYNCED   NodeInfo_State = 3
	NodeInfo_FORKED   NodeInfo_State = 4
)

var NodeInfo_State_name = map[int32]string{
	0: "UNKNOWN",
	1: "UNSYNCED",
	2: "SYNCING",
	3: "SYNCED",
	4: "FORKED",
}
var NodeInfo_State_value = map[string]int32{
	"UNKNOWN":  0,
	"UNSYNCED": 1,
	"SYNCING":  2,
	"SYNCED":   3,
	"FORKED":   4,
}

func (x NodeInfo_State) String() string {
	return proto.EnumName(NodeInfo_State_name, int32(x))
}
func (NodeInfo_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{28, 0} }

// *
// Empty message definition
type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// *
// Represents a query to get node state
type GetNodeStateReq struct {
}

func (m *GetNodeStateReq) Reset()                    { *m = GetNodeStateReq{} }
func (m *GetNodeStateReq) String() string            { return proto.CompactTextString(m) }
func (*GetNodeStateReq) ProtoMessage()               {}
func (*GetNodeStateReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// *
// Represents the reply message to node state query
type GetNodeStateResp struct {
	Info *NodeInfo `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (m *GetNodeStateResp) Reset()                    { *m = GetNodeStateResp{} }
func (m *GetNodeStateResp) String() string            { return proto.CompactTextString(m) }
func (*GetNodeStateResp) ProtoMessage()               {}
func (*GetNodeStateResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetNodeStateResp) GetInfo() *NodeInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

// *
// Represents a query to get known peers
type GetKnownPeersReq struct {
}

func (m *GetKnownPeersReq) Reset()                    { *m = GetKnownPeersReq{} }
func (m *GetKnownPeersReq) String() string            { return proto.CompactTextString(m) }
func (*GetKnownPeersReq) ProtoMessage()               {}
func (*GetKnownPeersReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// *
// Represents the reply message to known peers query
type GetKnownPeersResp struct {
	NodeInfo   *NodeInfo `protobuf:"bytes,1,opt,name=node_info,json=nodeInfo" json:"node_info,omitempty"`
	KnownPeers []*Peer   `protobuf:"bytes,2,rep,name=known_peers,json=knownPeers" json:"known_peers,omitempty"`
}

func (m *GetKnownPeersResp) Reset()                    { *m = GetKnownPeersResp{} }
func (m *GetKnownPeersResp) String() string            { return proto.CompactTextString(m) }
func (*GetKnownPeersResp) ProtoMessage()               {}
func (*GetKnownPeersResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetKnownPeersResp) GetNodeInfo() *NodeInfo {
	if m != nil {
		return m.NodeInfo
	}
	return nil
}

func (m *GetKnownPeersResp) GetKnownPeers() []*Peer {
	if m != nil {
		return m.KnownPeers
	}
	return nil
}

// *
// NOT USED -> RM?
type GetBlockReq struct {
	// Types that are valid to be assigned to Query:
	//	*GetBlockReq_Index
	//	*GetBlockReq_AfterHash
	Query isGetBlockReq_Query `protobuf_oneof:"query"`
}

func (m *GetBlockReq) Reset()                    { *m = GetBlockReq{} }
func (m *GetBlockReq) String() string            { return proto.CompactTextString(m) }
func (*GetBlockReq) ProtoMessage()               {}
func (*GetBlockReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type isGetBlockReq_Query interface {
	isGetBlockReq_Query()
}

type GetBlockReq_Index struct {
	Index uint64 `protobuf:"varint,1,opt,name=index,oneof"`
}
type GetBlockReq_AfterHash struct {
	AfterHash []byte `protobuf:"bytes,2,opt,name=after_hash,json=afterHash,proto3,oneof"`
}

func (*GetBlockReq_Index) isGetBlockReq_Query()     {}
func (*GetBlockReq_AfterHash) isGetBlockReq_Query() {}

func (m *GetBlockReq) GetQuery() isGetBlockReq_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *GetBlockReq) GetIndex() uint64 {
	if x, ok := m.GetQuery().(*GetBlockReq_Index); ok {
		return x.Index
	}
	return 0
}

func (m *GetBlockReq) GetAfterHash() []byte {
	if x, ok := m.GetQuery().(*GetBlockReq_AfterHash); ok {
		return x.AfterHash
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetBlockReq) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetBlockReq_OneofMarshaler, _GetBlockReq_OneofUnmarshaler, _GetBlockReq_OneofSizer, []interface{}{
		(*GetBlockReq_Index)(nil),
		(*GetBlockReq_AfterHash)(nil),
	}
}

func _GetBlockReq_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetBlockReq)
	// query
	switch x := m.Query.(type) {
	case *GetBlockReq_Index:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Index))
	case *GetBlockReq_AfterHash:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.AfterHash)
	case nil:
	default:
		return fmt.Errorf("GetBlockReq.Query has unexpected type %T", x)
	}
	return nil
}

func _GetBlockReq_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetBlockReq)
	switch tag {
	case 1: // query.index
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Query = &GetBlockReq_Index{x}
		return true, err
	case 2: // query.after_hash
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Query = &GetBlockReq_AfterHash{x}
		return true, err
	default:
		return false, nil
	}
}

func _GetBlockReq_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetBlockReq)
	// query
	switch x := m.Query.(type) {
	case *GetBlockReq_Index:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Index))
	case *GetBlockReq_AfterHash:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.AfterHash)))
		n += len(x.AfterHash)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// *
// NOT USED -> RM?
type GetBlockResp struct {
	NodeInfo *NodeInfo `protobuf:"bytes,1,opt,name=node_info,json=nodeInfo" json:"node_info,omitempty"`
	Block    *Block    `protobuf:"bytes,2,opt,name=block" json:"block,omitempty"`
}

func (m *GetBlockResp) Reset()                    { *m = GetBlockResp{} }
func (m *GetBlockResp) String() string            { return proto.CompactTextString(m) }
func (*GetBlockResp) ProtoMessage()               {}
func (*GetBlockResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetBlockResp) GetNodeInfo() *NodeInfo {
	if m != nil {
		return m.NodeInfo
	}
	return nil
}

func (m *GetBlockResp) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

// *
// Represents a query to get statistics about node
type GetStatsReq struct {
	IncludeTimeseries bool `protobuf:"varint,1,opt,name=include_timeseries,json=includeTimeseries" json:"include_timeseries,omitempty"`
}

func (m *GetStatsReq) Reset()                    { *m = GetStatsReq{} }
func (m *GetStatsReq) String() string            { return proto.CompactTextString(m) }
func (*GetStatsReq) ProtoMessage()               {}
func (*GetStatsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetStatsReq) GetIncludeTimeseries() bool {
	if m != nil {
		return m.IncludeTimeseries
	}
	return false
}

// *
// Represents the reply message to get statistics about node
type GetStatsResp struct {
	NodeInfo         *NodeInfo         `protobuf:"bytes,1,opt,name=node_info,json=nodeInfo" json:"node_info,omitempty"`
	Epoch            uint64            `protobuf:"varint,2,opt,name=epoch" json:"epoch,omitempty"`
	UptimeNetwork    uint64            `protobuf:"varint,3,opt,name=uptime_network,json=uptimeNetwork" json:"uptime_network,omitempty"`
	BlockLastReward  uint64            `protobuf:"varint,4,opt,name=block_last_reward,json=blockLastReward" json:"block_last_reward,omitempty"`
	BlockTimeMean    uint64            `protobuf:"varint,5,opt,name=block_time_mean,json=blockTimeMean" json:"block_time_mean,omitempty"`
	BlockTimeSd      uint64            `protobuf:"varint,6,opt,name=block_time_sd,json=blockTimeSd" json:"block_time_sd,omitempty"`
	CoinsTotalSupply uint64            `protobuf:"varint,7,opt,name=coins_total_supply,json=coinsTotalSupply" json:"coins_total_supply,omitempty"`
	CoinsEmitted     uint64            `protobuf:"varint,8,opt,name=coins_emitted,json=coinsEmitted" json:"coins_emitted,omitempty"`
	BlockTimeseries  []*BlockDataPoint `protobuf:"bytes,9,rep,name=block_timeseries,json=blockTimeseries" json:"block_timeseries,omitempty"`
}

func (m *GetStatsResp) Reset()                    { *m = GetStatsResp{} }
func (m *GetStatsResp) String() string            { return proto.CompactTextString(m) }
func (*GetStatsResp) ProtoMessage()               {}
func (*GetStatsResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetStatsResp) GetNodeInfo() *NodeInfo {
	if m != nil {
		return m.NodeInfo
	}
	return nil
}

func (m *GetStatsResp) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *GetStatsResp) GetUptimeNetwork() uint64 {
	if m != nil {
		return m.UptimeNetwork
	}
	return 0
}

func (m *GetStatsResp) GetBlockLastReward() uint64 {
	if m != nil {
		return m.BlockLastReward
	}
	return 0
}

func (m *GetStatsResp) GetBlockTimeMean() uint64 {
	if m != nil {
		return m.BlockTimeMean
	}
	return 0
}

func (m *GetStatsResp) GetBlockTimeSd() uint64 {
	if m != nil {
		return m.BlockTimeSd
	}
	return 0
}

func (m *GetStatsResp) GetCoinsTotalSupply() uint64 {
	if m != nil {
		return m.CoinsTotalSupply
	}
	return 0
}

func (m *GetStatsResp) GetCoinsEmitted() uint64 {
	if m != nil {
		return m.CoinsEmitted
	}
	return 0
}

func (m *GetStatsResp) GetBlockTimeseries() []*BlockDataPoint {
	if m != nil {
		return m.BlockTimeseries
	}
	return nil
}

type GetAddressFromPKReq struct {
	Pk []byte `protobuf:"bytes,1,opt,name=pk,proto3" json:"pk,omitempty"`
}

func (m *GetAddressFromPKReq) Reset()                    { *m = GetAddressFromPKReq{} }
func (m *GetAddressFromPKReq) String() string            { return proto.CompactTextString(m) }
func (*GetAddressFromPKReq) ProtoMessage()               {}
func (*GetAddressFromPKReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetAddressFromPKReq) GetPk() []byte {
	if m != nil {
		return m.Pk
	}
	return nil
}

type GetAddressFromPKResp struct {
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *GetAddressFromPKResp) Reset()                    { *m = GetAddressFromPKResp{} }
func (m *GetAddressFromPKResp) String() string            { return proto.CompactTextString(m) }
func (*GetAddressFromPKResp) ProtoMessage()               {}
func (*GetAddressFromPKResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetAddressFromPKResp) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

// *
// BlockDataPoint message definition
type BlockDataPoint struct {
	Number         uint64  `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
	Difficulty     string  `protobuf:"bytes,2,opt,name=difficulty" json:"difficulty,omitempty"`
	Timestamp      uint64  `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	TimeLast       uint64  `protobuf:"varint,4,opt,name=time_last,json=timeLast" json:"time_last,omitempty"`
	TimeMovavg     uint64  `protobuf:"varint,5,opt,name=time_movavg,json=timeMovavg" json:"time_movavg,omitempty"`
	HashPower      float32 `protobuf:"fixed32,6,opt,name=hash_power,json=hashPower" json:"hash_power,omitempty"`
	HeaderHash     []byte  `protobuf:"bytes,7,opt,name=header_hash,json=headerHash,proto3" json:"header_hash,omitempty"`
	HeaderHashPrev []byte  `protobuf:"bytes,8,opt,name=header_hash_prev,json=headerHashPrev,proto3" json:"header_hash_prev,omitempty"`
}

func (m *BlockDataPoint) Reset()                    { *m = BlockDataPoint{} }
func (m *BlockDataPoint) String() string            { return proto.CompactTextString(m) }
func (*BlockDataPoint) ProtoMessage()               {}
func (*BlockDataPoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *BlockDataPoint) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *BlockDataPoint) GetDifficulty() string {
	if m != nil {
		return m.Difficulty
	}
	return ""
}

func (m *BlockDataPoint) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BlockDataPoint) GetTimeLast() uint64 {
	if m != nil {
		return m.TimeLast
	}
	return 0
}

func (m *BlockDataPoint) GetTimeMovavg() uint64 {
	if m != nil {
		return m.TimeMovavg
	}
	return 0
}

func (m *BlockDataPoint) GetHashPower() float32 {
	if m != nil {
		return m.HashPower
	}
	return 0
}

func (m *BlockDataPoint) GetHeaderHash() []byte {
	if m != nil {
		return m.HeaderHash
	}
	return nil
}

func (m *BlockDataPoint) GetHeaderHashPrev() []byte {
	if m != nil {
		return m.HeaderHashPrev
	}
	return nil
}

type GetAddressStateReq struct {
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *GetAddressStateReq) Reset()                    { *m = GetAddressStateReq{} }
func (m *GetAddressStateReq) String() string            { return proto.CompactTextString(m) }
func (*GetAddressStateReq) ProtoMessage()               {}
func (*GetAddressStateReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetAddressStateReq) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

type GetAddressStateResp struct {
	State *AddressState `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
}

func (m *GetAddressStateResp) Reset()                    { *m = GetAddressStateResp{} }
func (m *GetAddressStateResp) String() string            { return proto.CompactTextString(m) }
func (*GetAddressStateResp) ProtoMessage()               {}
func (*GetAddressStateResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GetAddressStateResp) GetState() *AddressState {
	if m != nil {
		return m.State
	}
	return nil
}

type GetObjectReq struct {
	Query []byte `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *GetObjectReq) Reset()                    { *m = GetObjectReq{} }
func (m *GetObjectReq) String() string            { return proto.CompactTextString(m) }
func (*GetObjectReq) ProtoMessage()               {}
func (*GetObjectReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetObjectReq) GetQuery() []byte {
	if m != nil {
		return m.Query
	}
	return nil
}

type GetObjectResp struct {
	Found bool `protobuf:"varint,1,opt,name=found" json:"found,omitempty"`
	// Types that are valid to be assigned to Result:
	//	*GetObjectResp_AddressState
	//	*GetObjectResp_Transaction
	//	*GetObjectResp_BlockExtended
	Result isGetObjectResp_Result `protobuf_oneof:"result"`
}

func (m *GetObjectResp) Reset()                    { *m = GetObjectResp{} }
func (m *GetObjectResp) String() string            { return proto.CompactTextString(m) }
func (*GetObjectResp) ProtoMessage()               {}
func (*GetObjectResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type isGetObjectResp_Result interface {
	isGetObjectResp_Result()
}

type GetObjectResp_AddressState struct {
	AddressState *AddressState `protobuf:"bytes,2,opt,name=address_state,json=addressState,oneof"`
}
type GetObjectResp_Transaction struct {
	Transaction *TransactionExtended `protobuf:"bytes,3,opt,name=transaction,oneof"`
}
type GetObjectResp_BlockExtended struct {
	BlockExtended *BlockExtended `protobuf:"bytes,4,opt,name=block_extended,json=blockExtended,oneof"`
}

func (*GetObjectResp_AddressState) isGetObjectResp_Result()  {}
func (*GetObjectResp_Transaction) isGetObjectResp_Result()   {}
func (*GetObjectResp_BlockExtended) isGetObjectResp_Result() {}

func (m *GetObjectResp) GetResult() isGetObjectResp_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *GetObjectResp) GetFound() bool {
	if m != nil {
		return m.Found
	}
	return false
}

func (m *GetObjectResp) GetAddressState() *AddressState {
	if x, ok := m.GetResult().(*GetObjectResp_AddressState); ok {
		return x.AddressState
	}
	return nil
}

func (m *GetObjectResp) GetTransaction() *TransactionExtended {
	if x, ok := m.GetResult().(*GetObjectResp_Transaction); ok {
		return x.Transaction
	}
	return nil
}

func (m *GetObjectResp) GetBlockExtended() *BlockExtended {
	if x, ok := m.GetResult().(*GetObjectResp_BlockExtended); ok {
		return x.BlockExtended
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetObjectResp) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetObjectResp_OneofMarshaler, _GetObjectResp_OneofUnmarshaler, _GetObjectResp_OneofSizer, []interface{}{
		(*GetObjectResp_AddressState)(nil),
		(*GetObjectResp_Transaction)(nil),
		(*GetObjectResp_BlockExtended)(nil),
	}
}

func _GetObjectResp_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetObjectResp)
	// result
	switch x := m.Result.(type) {
	case *GetObjectResp_AddressState:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AddressState); err != nil {
			return err
		}
	case *GetObjectResp_Transaction:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Transaction); err != nil {
			return err
		}
	case *GetObjectResp_BlockExtended:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlockExtended); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetObjectResp.Result has unexpected type %T", x)
	}
	return nil
}

func _GetObjectResp_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetObjectResp)
	switch tag {
	case 2: // result.address_state
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AddressState)
		err := b.DecodeMessage(msg)
		m.Result = &GetObjectResp_AddressState{msg}
		return true, err
	case 3: // result.transaction
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TransactionExtended)
		err := b.DecodeMessage(msg)
		m.Result = &GetObjectResp_Transaction{msg}
		return true, err
	case 4: // result.block_extended
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BlockExtended)
		err := b.DecodeMessage(msg)
		m.Result = &GetObjectResp_BlockExtended{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GetObjectResp_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetObjectResp)
	// result
	switch x := m.Result.(type) {
	case *GetObjectResp_AddressState:
		s := proto.Size(x.AddressState)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetObjectResp_Transaction:
		s := proto.Size(x.Transaction)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetObjectResp_BlockExtended:
		s := proto.Size(x.BlockExtended)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GetLatestDataReq struct {
	Filter   GetLatestDataReq_Filter `protobuf:"varint,1,opt,name=filter,enum=qrl.GetLatestDataReq_Filter" json:"filter,omitempty"`
	Offset   uint32                  `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Quantity uint32                  `protobuf:"varint,3,opt,name=quantity" json:"quantity,omitempty"`
}

func (m *GetLatestDataReq) Reset()                    { *m = GetLatestDataReq{} }
func (m *GetLatestDataReq) String() string            { return proto.CompactTextString(m) }
func (*GetLatestDataReq) ProtoMessage()               {}
func (*GetLatestDataReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GetLatestDataReq) GetFilter() GetLatestDataReq_Filter {
	if m != nil {
		return m.Filter
	}
	return GetLatestDataReq_ALL
}

func (m *GetLatestDataReq) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetLatestDataReq) GetQuantity() uint32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

type GetLatestDataResp struct {
	Blockheaders            []*BlockHeaderExtended `protobuf:"bytes,1,rep,name=blockheaders" json:"blockheaders,omitempty"`
	Transactions            []*TransactionExtended `protobuf:"bytes,2,rep,name=transactions" json:"transactions,omitempty"`
	TransactionsUnconfirmed []*TransactionExtended `protobuf:"bytes,3,rep,name=transactions_unconfirmed,json=transactionsUnconfirmed" json:"transactions_unconfirmed,omitempty"`
}

func (m *GetLatestDataResp) Reset()                    { *m = GetLatestDataResp{} }
func (m *GetLatestDataResp) String() string            { return proto.CompactTextString(m) }
func (*GetLatestDataResp) ProtoMessage()               {}
func (*GetLatestDataResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetLatestDataResp) GetBlockheaders() []*BlockHeaderExtended {
	if m != nil {
		return m.Blockheaders
	}
	return nil
}

func (m *GetLatestDataResp) GetTransactions() []*TransactionExtended {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *GetLatestDataResp) GetTransactionsUnconfirmed() []*TransactionExtended {
	if m != nil {
		return m.TransactionsUnconfirmed
	}
	return nil
}

type TransferCoinsReq struct {
	MasterAddr  []byte   `protobuf:"bytes,1,opt,name=master_addr,json=masterAddr,proto3" json:"master_addr,omitempty"`
	AddressesTo [][]byte `protobuf:"bytes,2,rep,name=addresses_to,json=addressesTo,proto3" json:"addresses_to,omitempty"`
	Amounts     []uint64 `protobuf:"varint,3,rep,packed,name=amounts" json:"amounts,omitempty"`
	Fee         uint64   `protobuf:"varint,4,opt,name=fee" json:"fee,omitempty"`
	XmssPk      []byte   `protobuf:"bytes,5,opt,name=xmss_pk,json=xmssPk,proto3" json:"xmss_pk,omitempty"`
}

func (m *TransferCoinsReq) Reset()                    { *m = TransferCoinsReq{} }
func (m *TransferCoinsReq) String() string            { return proto.CompactTextString(m) }
func (*TransferCoinsReq) ProtoMessage()               {}
func (*TransferCoinsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *TransferCoinsReq) GetMasterAddr() []byte {
	if m != nil {
		return m.MasterAddr
	}
	return nil
}

func (m *TransferCoinsReq) GetAddressesTo() [][]byte {
	if m != nil {
		return m.AddressesTo
	}
	return nil
}

func (m *TransferCoinsReq) GetAmounts() []uint64 {
	if m != nil {
		return m.Amounts
	}
	return nil
}

func (m *TransferCoinsReq) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *TransferCoinsReq) GetXmssPk() []byte {
	if m != nil {
		return m.XmssPk
	}
	return nil
}

type TransferCoinsResp struct {
	ExtendedTransactionUnsigned *TransactionExtended `protobuf:"bytes,1,opt,name=extended_transaction_unsigned,json=extendedTransactionUnsigned" json:"extended_transaction_unsigned,omitempty"`
}

func (m *TransferCoinsResp) Reset()                    { *m = TransferCoinsResp{} }
func (m *TransferCoinsResp) String() string            { return proto.CompactTextString(m) }
func (*TransferCoinsResp) ProtoMessage()               {}
func (*TransferCoinsResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *TransferCoinsResp) GetExtendedTransactionUnsigned() *TransactionExtended {
	if m != nil {
		return m.ExtendedTransactionUnsigned
	}
	return nil
}

type PushTransactionReq struct {
	TransactionSigned *Transaction `protobuf:"bytes,1,opt,name=transaction_signed,json=transactionSigned" json:"transaction_signed,omitempty"`
}

func (m *PushTransactionReq) Reset()                    { *m = PushTransactionReq{} }
func (m *PushTransactionReq) String() string            { return proto.CompactTextString(m) }
func (*PushTransactionReq) ProtoMessage()               {}
func (*PushTransactionReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *PushTransactionReq) GetTransactionSigned() *Transaction {
	if m != nil {
		return m.TransactionSigned
	}
	return nil
}

type PushTransactionResp struct {
	ErrorCode        PushTransactionResp_ResponseCode `protobuf:"varint,1,opt,name=error_code,json=errorCode,enum=qrl.PushTransactionResp_ResponseCode" json:"error_code,omitempty"`
	ErrorDescription string                           `protobuf:"bytes,2,opt,name=error_description,json=errorDescription" json:"error_description,omitempty"`
	TxHash           []byte                           `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (m *PushTransactionResp) Reset()                    { *m = PushTransactionResp{} }
func (m *PushTransactionResp) String() string            { return proto.CompactTextString(m) }
func (*PushTransactionResp) ProtoMessage()               {}
func (*PushTransactionResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *PushTransactionResp) GetErrorCode() PushTransactionResp_ResponseCode {
	if m != nil {
		return m.ErrorCode
	}
	return PushTransactionResp_UNKNOWN
}

func (m *PushTransactionResp) GetErrorDescription() string {
	if m != nil {
		return m.ErrorDescription
	}
	return ""
}

func (m *PushTransactionResp) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

type TokenTxnReq struct {
	MasterAddr      []byte           `protobuf:"bytes,1,opt,name=master_addr,json=masterAddr,proto3" json:"master_addr,omitempty"`
	Symbol          []byte           `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Name            []byte           `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Owner           []byte           `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	Decimals        uint64           `protobuf:"varint,5,opt,name=decimals" json:"decimals,omitempty"`
	InitialBalances []*AddressAmount `protobuf:"bytes,6,rep,name=initial_balances,json=initialBalances" json:"initial_balances,omitempty"`
	Fee             uint64           `protobuf:"varint,7,opt,name=fee" json:"fee,omitempty"`
	XmssPk          []byte           `protobuf:"bytes,8,opt,name=xmss_pk,json=xmssPk,proto3" json:"xmss_pk,omitempty"`
}

func (m *TokenTxnReq) Reset()                    { *m = TokenTxnReq{} }
func (m *TokenTxnReq) String() string            { return proto.CompactTextString(m) }
func (*TokenTxnReq) ProtoMessage()               {}
func (*TokenTxnReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *TokenTxnReq) GetMasterAddr() []byte {
	if m != nil {
		return m.MasterAddr
	}
	return nil
}

func (m *TokenTxnReq) GetSymbol() []byte {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *TokenTxnReq) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *TokenTxnReq) GetOwner() []byte {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *TokenTxnReq) GetDecimals() uint64 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *TokenTxnReq) GetInitialBalances() []*AddressAmount {
	if m != nil {
		return m.InitialBalances
	}
	return nil
}

func (m *TokenTxnReq) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *TokenTxnReq) GetXmssPk() []byte {
	if m != nil {
		return m.XmssPk
	}
	return nil
}

type TransferTokenTxnReq struct {
	MasterAddr  []byte   `protobuf:"bytes,1,opt,name=master_addr,json=masterAddr,proto3" json:"master_addr,omitempty"`
	AddressesTo [][]byte `protobuf:"bytes,2,rep,name=addresses_to,json=addressesTo,proto3" json:"addresses_to,omitempty"`
	TokenTxhash []byte   `protobuf:"bytes,3,opt,name=token_txhash,json=tokenTxhash,proto3" json:"token_txhash,omitempty"`
	Amounts     []uint64 `protobuf:"varint,4,rep,packed,name=amounts" json:"amounts,omitempty"`
	Fee         uint64   `protobuf:"varint,5,opt,name=fee" json:"fee,omitempty"`
	XmssPk      []byte   `protobuf:"bytes,6,opt,name=xmss_pk,json=xmssPk,proto3" json:"xmss_pk,omitempty"`
}

func (m *TransferTokenTxnReq) Reset()                    { *m = TransferTokenTxnReq{} }
func (m *TransferTokenTxnReq) String() string            { return proto.CompactTextString(m) }
func (*TransferTokenTxnReq) ProtoMessage()               {}
func (*TransferTokenTxnReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *TransferTokenTxnReq) GetMasterAddr() []byte {
	if m != nil {
		return m.MasterAddr
	}
	return nil
}

func (m *TransferTokenTxnReq) GetAddressesTo() [][]byte {
	if m != nil {
		return m.AddressesTo
	}
	return nil
}

func (m *TransferTokenTxnReq) GetTokenTxhash() []byte {
	if m != nil {
		return m.TokenTxhash
	}
	return nil
}

func (m *TransferTokenTxnReq) GetAmounts() []uint64 {
	if m != nil {
		return m.Amounts
	}
	return nil
}

func (m *TransferTokenTxnReq) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *TransferTokenTxnReq) GetXmssPk() []byte {
	if m != nil {
		return m.XmssPk
	}
	return nil
}

type SlaveTxnReq struct {
	MasterAddr  []byte   `protobuf:"bytes,1,opt,name=master_addr,json=masterAddr,proto3" json:"master_addr,omitempty"`
	SlavePks    [][]byte `protobuf:"bytes,2,rep,name=slave_pks,json=slavePks,proto3" json:"slave_pks,omitempty"`
	AccessTypes []uint32 `protobuf:"varint,3,rep,packed,name=access_types,json=accessTypes" json:"access_types,omitempty"`
	Fee         uint64   `protobuf:"varint,4,opt,name=fee" json:"fee,omitempty"`
	XmssPk      []byte   `protobuf:"bytes,5,opt,name=xmss_pk,json=xmssPk,proto3" json:"xmss_pk,omitempty"`
}

func (m *SlaveTxnReq) Reset()                    { *m = SlaveTxnReq{} }
func (m *SlaveTxnReq) String() string            { return proto.CompactTextString(m) }
func (*SlaveTxnReq) ProtoMessage()               {}
func (*SlaveTxnReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *SlaveTxnReq) GetMasterAddr() []byte {
	if m != nil {
		return m.MasterAddr
	}
	return nil
}

func (m *SlaveTxnReq) GetSlavePks() [][]byte {
	if m != nil {
		return m.SlavePks
	}
	return nil
}

func (m *SlaveTxnReq) GetAccessTypes() []uint32 {
	if m != nil {
		return m.AccessTypes
	}
	return nil
}

func (m *SlaveTxnReq) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *SlaveTxnReq) GetXmssPk() []byte {
	if m != nil {
		return m.XmssPk
	}
	return nil
}

type LatticePublicKeyTxnReq struct {
	MasterAddr  []byte `protobuf:"bytes,1,opt,name=master_addr,json=masterAddr,proto3" json:"master_addr,omitempty"`
	KyberPk     []byte `protobuf:"bytes,2,opt,name=kyber_pk,json=kyberPk,proto3" json:"kyber_pk,omitempty"`
	DilithiumPk []byte `protobuf:"bytes,3,opt,name=dilithium_pk,json=dilithiumPk,proto3" json:"dilithium_pk,omitempty"`
	Fee         uint64 `protobuf:"varint,4,opt,name=fee" json:"fee,omitempty"`
	XmssPk      []byte `protobuf:"bytes,5,opt,name=xmss_pk,json=xmssPk,proto3" json:"xmss_pk,omitempty"`
}

func (m *LatticePublicKeyTxnReq) Reset()                    { *m = LatticePublicKeyTxnReq{} }
func (m *LatticePublicKeyTxnReq) String() string            { return proto.CompactTextString(m) }
func (*LatticePublicKeyTxnReq) ProtoMessage()               {}
func (*LatticePublicKeyTxnReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *LatticePublicKeyTxnReq) GetMasterAddr() []byte {
	if m != nil {
		return m.MasterAddr
	}
	return nil
}

func (m *LatticePublicKeyTxnReq) GetKyberPk() []byte {
	if m != nil {
		return m.KyberPk
	}
	return nil
}

func (m *LatticePublicKeyTxnReq) GetDilithiumPk() []byte {
	if m != nil {
		return m.DilithiumPk
	}
	return nil
}

func (m *LatticePublicKeyTxnReq) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *LatticePublicKeyTxnReq) GetXmssPk() []byte {
	if m != nil {
		return m.XmssPk
	}
	return nil
}

type GetLocalAddressesReq struct {
}

func (m *GetLocalAddressesReq) Reset()                    { *m = GetLocalAddressesReq{} }
func (m *GetLocalAddressesReq) String() string            { return proto.CompactTextString(m) }
func (*GetLocalAddressesReq) ProtoMessage()               {}
func (*GetLocalAddressesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

type GetLocalAddressesResp struct {
	Addresses [][]byte `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *GetLocalAddressesResp) Reset()                    { *m = GetLocalAddressesResp{} }
func (m *GetLocalAddressesResp) String() string            { return proto.CompactTextString(m) }
func (*GetLocalAddressesResp) ProtoMessage()               {}
func (*GetLocalAddressesResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *GetLocalAddressesResp) GetAddresses() [][]byte {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type NodeInfo struct {
	Version        string         `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	State          NodeInfo_State `protobuf:"varint,2,opt,name=state,enum=qrl.NodeInfo_State" json:"state,omitempty"`
	NumConnections uint32         `protobuf:"varint,3,opt,name=num_connections,json=numConnections" json:"num_connections,omitempty"`
	NumKnownPeers  uint32         `protobuf:"varint,4,opt,name=num_known_peers,json=numKnownPeers" json:"num_known_peers,omitempty"`
	Uptime         uint64         `protobuf:"varint,5,opt,name=uptime" json:"uptime,omitempty"`
	BlockHeight    uint64         `protobuf:"varint,6,opt,name=block_height,json=blockHeight" json:"block_height,omitempty"`
	BlockLastHash  []byte         `protobuf:"bytes,7,opt,name=block_last_hash,json=blockLastHash,proto3" json:"block_last_hash,omitempty"`
	NetworkId      string         `protobuf:"bytes,8,opt,name=network_id,json=networkId" json:"network_id,omitempty"`
}

func (m *NodeInfo) Reset()                    { *m = NodeInfo{} }
func (m *NodeInfo) String() string            { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()               {}
func (*NodeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *NodeInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *NodeInfo) GetState() NodeInfo_State {
	if m != nil {
		return m.State
	}
	return NodeInfo_UNKNOWN
}

func (m *NodeInfo) GetNumConnections() uint32 {
	if m != nil {
		return m.NumConnections
	}
	return 0
}

func (m *NodeInfo) GetNumKnownPeers() uint32 {
	if m != nil {
		return m.NumKnownPeers
	}
	return 0
}

func (m *NodeInfo) GetUptime() uint64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *NodeInfo) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *NodeInfo) GetBlockLastHash() []byte {
	if m != nil {
		return m.BlockLastHash
	}
	return nil
}

func (m *NodeInfo) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

type StoredPeers struct {
	Peers []*Peer `protobuf:"bytes,1,rep,name=peers" json:"peers,omitempty"`
}

func (m *StoredPeers) Reset()                    { *m = StoredPeers{} }
func (m *StoredPeers) String() string            { return proto.CompactTextString(m) }
func (*StoredPeers) ProtoMessage()               {}
func (*StoredPeers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *StoredPeers) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

type Peer struct {
	Ip string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (m *Peer) String() string            { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *Peer) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type AddressState struct {
	Address            []byte            `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Balance            uint64            `protobuf:"varint,2,opt,name=balance" json:"balance,omitempty"`
	Nonce              uint64            `protobuf:"varint,3,opt,name=nonce" json:"nonce,omitempty"`
	OtsBitfield        [][]byte          `protobuf:"bytes,4,rep,name=ots_bitfield,json=otsBitfield,proto3" json:"ots_bitfield,omitempty"`
	TransactionHashes  [][]byte          `protobuf:"bytes,5,rep,name=transaction_hashes,json=transactionHashes,proto3" json:"transaction_hashes,omitempty"`
	Tokens             map[string]uint64 `protobuf:"bytes,6,rep,name=tokens" json:"tokens,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	LatticePKList      []*LatticePK      `protobuf:"bytes,7,rep,name=latticePK_list,json=latticePKList" json:"latticePK_list,omitempty"`
	SlavePksAccessType map[string]uint32 `protobuf:"bytes,8,rep,name=slave_pks_access_type,json=slavePksAccessType" json:"slave_pks_access_type,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	OtsCounter         uint64            `protobuf:"varint,9,opt,name=ots_counter,json=otsCounter" json:"ots_counter,omitempty"`
}

func (m *AddressState) Reset()                    { *m = AddressState{} }
func (m *AddressState) String() string            { return proto.CompactTextString(m) }
func (*AddressState) ProtoMessage()               {}
func (*AddressState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *AddressState) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *AddressState) GetBalance() uint64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *AddressState) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *AddressState) GetOtsBitfield() [][]byte {
	if m != nil {
		return m.OtsBitfield
	}
	return nil
}

func (m *AddressState) GetTransactionHashes() [][]byte {
	if m != nil {
		return m.TransactionHashes
	}
	return nil
}

func (m *AddressState) GetTokens() map[string]uint64 {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *AddressState) GetLatticePKList() []*LatticePK {
	if m != nil {
		return m.LatticePKList
	}
	return nil
}

func (m *AddressState) GetSlavePksAccessType() map[string]uint32 {
	if m != nil {
		return m.SlavePksAccessType
	}
	return nil
}

func (m *AddressState) GetOtsCounter() uint64 {
	if m != nil {
		return m.OtsCounter
	}
	return 0
}

type LatticePK struct {
	Txhash      []byte `protobuf:"bytes,1,opt,name=txhash,proto3" json:"txhash,omitempty"`
	DilithiumPk []byte `protobuf:"bytes,2,opt,name=dilithium_pk,json=dilithiumPk,proto3" json:"dilithium_pk,omitempty"`
	KyberPk     []byte `protobuf:"bytes,3,opt,name=kyber_pk,json=kyberPk,proto3" json:"kyber_pk,omitempty"`
}

func (m *LatticePK) Reset()                    { *m = LatticePK{} }
func (m *LatticePK) String() string            { return proto.CompactTextString(m) }
func (*LatticePK) ProtoMessage()               {}
func (*LatticePK) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *LatticePK) GetTxhash() []byte {
	if m != nil {
		return m.Txhash
	}
	return nil
}

func (m *LatticePK) GetDilithiumPk() []byte {
	if m != nil {
		return m.DilithiumPk
	}
	return nil
}

func (m *LatticePK) GetKyberPk() []byte {
	if m != nil {
		return m.KyberPk
	}
	return nil
}

type AddressAmount struct {
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Amount  uint64 `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
}

func (m *AddressAmount) Reset()                    { *m = AddressAmount{} }
func (m *AddressAmount) String() string            { return proto.CompactTextString(m) }
func (*AddressAmount) ProtoMessage()               {}
func (*AddressAmount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *AddressAmount) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *AddressAmount) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type BlockHeader struct {
	// Header
	HashHeader       []byte `protobuf:"bytes,1,opt,name=hash_header,json=hashHeader,proto3" json:"hash_header,omitempty"`
	BlockNumber      uint64 `protobuf:"varint,2,opt,name=block_number,json=blockNumber" json:"block_number,omitempty"`
	TimestampSeconds uint64 `protobuf:"varint,3,opt,name=timestamp_seconds,json=timestampSeconds" json:"timestamp_seconds,omitempty"`
	HashHeaderPrev   []byte `protobuf:"bytes,4,opt,name=hash_header_prev,json=hashHeaderPrev,proto3" json:"hash_header_prev,omitempty"`
	RewardBlock      uint64 `protobuf:"varint,5,opt,name=reward_block,json=rewardBlock" json:"reward_block,omitempty"`
	RewardFee        uint64 `protobuf:"varint,6,opt,name=reward_fee,json=rewardFee" json:"reward_fee,omitempty"`
	MerkleRoot       []byte `protobuf:"bytes,7,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	MiningNonce      uint32 `protobuf:"varint,8,opt,name=mining_nonce,json=miningNonce" json:"mining_nonce,omitempty"`
	ExtraNonce       uint64 `protobuf:"varint,9,opt,name=extra_nonce,json=extraNonce" json:"extra_nonce,omitempty"`
}

func (m *BlockHeader) Reset()                    { *m = BlockHeader{} }
func (m *BlockHeader) String() string            { return proto.CompactTextString(m) }
func (*BlockHeader) ProtoMessage()               {}
func (*BlockHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *BlockHeader) GetHashHeader() []byte {
	if m != nil {
		return m.HashHeader
	}
	return nil
}

func (m *BlockHeader) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *BlockHeader) GetTimestampSeconds() uint64 {
	if m != nil {
		return m.TimestampSeconds
	}
	return 0
}

func (m *BlockHeader) GetHashHeaderPrev() []byte {
	if m != nil {
		return m.HashHeaderPrev
	}
	return nil
}

func (m *BlockHeader) GetRewardBlock() uint64 {
	if m != nil {
		return m.RewardBlock
	}
	return 0
}

func (m *BlockHeader) GetRewardFee() uint64 {
	if m != nil {
		return m.RewardFee
	}
	return 0
}

func (m *BlockHeader) GetMerkleRoot() []byte {
	if m != nil {
		return m.MerkleRoot
	}
	return nil
}

func (m *BlockHeader) GetMiningNonce() uint32 {
	if m != nil {
		return m.MiningNonce
	}
	return 0
}

func (m *BlockHeader) GetExtraNonce() uint64 {
	if m != nil {
		return m.ExtraNonce
	}
	return 0
}

type BlockHeaderExtended struct {
	Header           *BlockHeader      `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	TransactionCount *TransactionCount `protobuf:"bytes,2,opt,name=transaction_count,json=transactionCount" json:"transaction_count,omitempty"`
}

func (m *BlockHeaderExtended) Reset()                    { *m = BlockHeaderExtended{} }
func (m *BlockHeaderExtended) String() string            { return proto.CompactTextString(m) }
func (*BlockHeaderExtended) ProtoMessage()               {}
func (*BlockHeaderExtended) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *BlockHeaderExtended) GetHeader() *BlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *BlockHeaderExtended) GetTransactionCount() *TransactionCount {
	if m != nil {
		return m.TransactionCount
	}
	return nil
}

type TransactionCount struct {
	Count map[uint32]uint32 `protobuf:"bytes,1,rep,name=count" json:"count,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *TransactionCount) Reset()                    { *m = TransactionCount{} }
func (m *TransactionCount) String() string            { return proto.CompactTextString(m) }
func (*TransactionCount) ProtoMessage()               {}
func (*TransactionCount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *TransactionCount) GetCount() map[uint32]uint32 {
	if m != nil {
		return m.Count
	}
	return nil
}

type TransactionExtended struct {
	Header   *BlockHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Tx       *Transaction `protobuf:"bytes,2,opt,name=tx" json:"tx,omitempty"`
	AddrFrom []byte       `protobuf:"bytes,3,opt,name=addr_from,json=addrFrom,proto3" json:"addr_from,omitempty"`
	Size     uint64       `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
}

func (m *TransactionExtended) Reset()                    { *m = TransactionExtended{} }
func (m *TransactionExtended) String() string            { return proto.CompactTextString(m) }
func (*TransactionExtended) ProtoMessage()               {}
func (*TransactionExtended) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *TransactionExtended) GetHeader() *BlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TransactionExtended) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *TransactionExtended) GetAddrFrom() []byte {
	if m != nil {
		return m.AddrFrom
	}
	return nil
}

func (m *TransactionExtended) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type BlockExtended struct {
	Header               *BlockHeader           `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ExtendedTransactions []*TransactionExtended `protobuf:"bytes,2,rep,name=extended_transactions,json=extendedTransactions" json:"extended_transactions,omitempty"`
	// This is only applicable to genesis blocks
	GenesisBalance []*GenesisBalance `protobuf:"bytes,3,rep,name=genesis_balance,json=genesisBalance" json:"genesis_balance,omitempty"`
	Size           uint64            `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
}

func (m *BlockExtended) Reset()                    { *m = BlockExtended{} }
func (m *BlockExtended) String() string            { return proto.CompactTextString(m) }
func (*BlockExtended) ProtoMessage()               {}
func (*BlockExtended) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *BlockExtended) GetHeader() *BlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *BlockExtended) GetExtendedTransactions() []*TransactionExtended {
	if m != nil {
		return m.ExtendedTransactions
	}
	return nil
}

func (m *BlockExtended) GetGenesisBalance() []*GenesisBalance {
	if m != nil {
		return m.GenesisBalance
	}
	return nil
}

func (m *BlockExtended) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type Block struct {
	Header       *BlockHeader   `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Transactions []*Transaction `protobuf:"bytes,2,rep,name=transactions" json:"transactions,omitempty"`
	// This is only applicable to genesis blocks
	GenesisBalance []*GenesisBalance `protobuf:"bytes,3,rep,name=genesis_balance,json=genesisBalance" json:"genesis_balance,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *Block) GetHeader() *BlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Block) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *Block) GetGenesisBalance() []*GenesisBalance {
	if m != nil {
		return m.GenesisBalance
	}
	return nil
}

type GenesisBalance struct {
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Balance uint64 `protobuf:"varint,2,opt,name=balance" json:"balance,omitempty"`
}

func (m *GenesisBalance) Reset()                    { *m = GenesisBalance{} }
func (m *GenesisBalance) String() string            { return proto.CompactTextString(m) }
func (*GenesisBalance) ProtoMessage()               {}
func (*GenesisBalance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *GenesisBalance) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *GenesisBalance) GetBalance() uint64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

type BlockMetaDataList struct {
	BlockNumberHashes []*BlockMetaData `protobuf:"bytes,1,rep,name=block_number_hashes,json=blockNumberHashes" json:"block_number_hashes,omitempty"`
}

func (m *BlockMetaDataList) Reset()                    { *m = BlockMetaDataList{} }
func (m *BlockMetaDataList) String() string            { return proto.CompactTextString(m) }
func (*BlockMetaDataList) ProtoMessage()               {}
func (*BlockMetaDataList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *BlockMetaDataList) GetBlockNumberHashes() []*BlockMetaData {
	if m != nil {
		return m.BlockNumberHashes
	}
	return nil
}

type Transaction struct {
	MasterAddr      []byte `protobuf:"bytes,1,opt,name=master_addr,json=masterAddr,proto3" json:"master_addr,omitempty"`
	Fee             uint64 `protobuf:"varint,2,opt,name=fee" json:"fee,string,omitempty"`
	PublicKey       []byte `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Signature       []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	Nonce           uint64 `protobuf:"varint,5,opt,name=nonce" json:"nonce,string,omitempty"`
	TransactionHash []byte `protobuf:"bytes,6,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	// Types that are valid to be assigned to TransactionType:
	//	*Transaction_Transfer_
	//	*Transaction_Coinbase
	//	*Transaction_LatticePK
	//	*Transaction_Message_
	//	*Transaction_Token_
	//	*Transaction_TransferToken_
	//	*Transaction_Slave_
	TransactionType isTransaction_TransactionType `protobuf_oneof:"transactionType"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

type isTransaction_TransactionType interface {
	isTransaction_TransactionType()
}

type Transaction_Transfer_ struct {
	Transfer *Transaction_Transfer `protobuf:"bytes,7,opt,name=transfer,oneof"`
}
type Transaction_Coinbase struct {
	Coinbase *Transaction_CoinBase `protobuf:"bytes,8,opt,name=coinbase,oneof"`
}
type Transaction_LatticePK struct {
	LatticePK *Transaction_LatticePublicKey `protobuf:"bytes,9,opt,name=latticePK,oneof"`
}
type Transaction_Message_ struct {
	Message *Transaction_Message `protobuf:"bytes,10,opt,name=message,oneof"`
}
type Transaction_Token_ struct {
	Token *Transaction_Token `protobuf:"bytes,11,opt,name=token,oneof"`
}
type Transaction_TransferToken_ struct {
	TransferToken *Transaction_TransferToken `protobuf:"bytes,12,opt,name=transfer_token,json=transferToken,oneof"`
}
type Transaction_Slave_ struct {
	Slave *Transaction_Slave `protobuf:"bytes,13,opt,name=slave,oneof"`
}

func (*Transaction_Transfer_) isTransaction_TransactionType()      {}
func (*Transaction_Coinbase) isTransaction_TransactionType()       {}
func (*Transaction_LatticePK) isTransaction_TransactionType()      {}
func (*Transaction_Message_) isTransaction_TransactionType()       {}
func (*Transaction_Token_) isTransaction_TransactionType()         {}
func (*Transaction_TransferToken_) isTransaction_TransactionType() {}
func (*Transaction_Slave_) isTransaction_TransactionType()         {}

func (m *Transaction) GetTransactionType() isTransaction_TransactionType {
	if m != nil {
		return m.TransactionType
	}
	return nil
}

func (m *Transaction) GetMasterAddr() []byte {
	if m != nil {
		return m.MasterAddr
	}
	return nil
}

func (m *Transaction) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *Transaction) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *Transaction) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Transaction) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Transaction) GetTransactionHash() []byte {
	if m != nil {
		return m.TransactionHash
	}
	return nil
}

func (m *Transaction) GetTransfer() *Transaction_Transfer {
	if x, ok := m.GetTransactionType().(*Transaction_Transfer_); ok {
		return x.Transfer
	}
	return nil
}

func (m *Transaction) GetCoinbase() *Transaction_CoinBase {
	if x, ok := m.GetTransactionType().(*Transaction_Coinbase); ok {
		return x.Coinbase
	}
	return nil
}

func (m *Transaction) GetLatticePK() *Transaction_LatticePublicKey {
	if x, ok := m.GetTransactionType().(*Transaction_LatticePK); ok {
		return x.LatticePK
	}
	return nil
}

func (m *Transaction) GetMessage() *Transaction_Message {
	if x, ok := m.GetTransactionType().(*Transaction_Message_); ok {
		return x.Message
	}
	return nil
}

func (m *Transaction) GetToken() *Transaction_Token {
	if x, ok := m.GetTransactionType().(*Transaction_Token_); ok {
		return x.Token
	}
	return nil
}

func (m *Transaction) GetTransferToken() *Transaction_TransferToken {
	if x, ok := m.GetTransactionType().(*Transaction_TransferToken_); ok {
		return x.TransferToken
	}
	return nil
}

func (m *Transaction) GetSlave() *Transaction_Slave {
	if x, ok := m.GetTransactionType().(*Transaction_Slave_); ok {
		return x.Slave
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Transaction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Transaction_OneofMarshaler, _Transaction_OneofUnmarshaler, _Transaction_OneofSizer, []interface{}{
		(*Transaction_Transfer_)(nil),
		(*Transaction_Coinbase)(nil),
		(*Transaction_LatticePK)(nil),
		(*Transaction_Message_)(nil),
		(*Transaction_Token_)(nil),
		(*Transaction_TransferToken_)(nil),
		(*Transaction_Slave_)(nil),
	}
}

func _Transaction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Transaction)
	// transactionType
	switch x := m.TransactionType.(type) {
	case *Transaction_Transfer_:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Transfer); err != nil {
			return err
		}
	case *Transaction_Coinbase:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Coinbase); err != nil {
			return err
		}
	case *Transaction_LatticePK:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LatticePK); err != nil {
			return err
		}
	case *Transaction_Message_:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Message); err != nil {
			return err
		}
	case *Transaction_Token_:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Token); err != nil {
			return err
		}
	case *Transaction_TransferToken_:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TransferToken); err != nil {
			return err
		}
	case *Transaction_Slave_:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Slave); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Transaction.TransactionType has unexpected type %T", x)
	}
	return nil
}

func _Transaction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Transaction)
	switch tag {
	case 7: // transactionType.transfer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Transaction_Transfer)
		err := b.DecodeMessage(msg)
		m.TransactionType = &Transaction_Transfer_{msg}
		return true, err
	case 8: // transactionType.coinbase
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Transaction_CoinBase)
		err := b.DecodeMessage(msg)
		m.TransactionType = &Transaction_Coinbase{msg}
		return true, err
	case 9: // transactionType.latticePK
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Transaction_LatticePublicKey)
		err := b.DecodeMessage(msg)
		m.TransactionType = &Transaction_LatticePK{msg}
		return true, err
	case 10: // transactionType.message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Transaction_Message)
		err := b.DecodeMessage(msg)
		m.TransactionType = &Transaction_Message_{msg}
		return true, err
	case 11: // transactionType.token
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Transaction_Token)
		err := b.DecodeMessage(msg)
		m.TransactionType = &Transaction_Token_{msg}
		return true, err
	case 12: // transactionType.transfer_token
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Transaction_TransferToken)
		err := b.DecodeMessage(msg)
		m.TransactionType = &Transaction_TransferToken_{msg}
		return true, err
	case 13: // transactionType.slave
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Transaction_Slave)
		err := b.DecodeMessage(msg)
		m.TransactionType = &Transaction_Slave_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Transaction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Transaction)
	// transactionType
	switch x := m.TransactionType.(type) {
	case *Transaction_Transfer_:
		s := proto.Size(x.Transfer)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Transaction_Coinbase:
		s := proto.Size(x.Coinbase)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Transaction_LatticePK:
		s := proto.Size(x.LatticePK)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Transaction_Message_:
		s := proto.Size(x.Message)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Transaction_Token_:
		s := proto.Size(x.Token)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Transaction_TransferToken_:
		s := proto.Size(x.TransferToken)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Transaction_Slave_:
		s := proto.Size(x.Slave)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ////////
type Transaction_Transfer struct {
	AddrsTo [][]byte `protobuf:"bytes,1,rep,name=addrs_to,json=addrsTo,proto3" json:"addrs_to,omitempty"`
	Amounts []uint64 `protobuf:"varint,2,rep,packed,name=amounts" json:"amounts,omitempty"`
}

func (m *Transaction_Transfer) Reset()                    { *m = Transaction_Transfer{} }
func (m *Transaction_Transfer) String() string            { return proto.CompactTextString(m) }
func (*Transaction_Transfer) ProtoMessage()               {}
func (*Transaction_Transfer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42, 0} }

func (m *Transaction_Transfer) GetAddrsTo() [][]byte {
	if m != nil {
		return m.AddrsTo
	}
	return nil
}

func (m *Transaction_Transfer) GetAmounts() []uint64 {
	if m != nil {
		return m.Amounts
	}
	return nil
}

type Transaction_CoinBase struct {
	AddrTo []byte `protobuf:"bytes,1,opt,name=addr_to,json=addrTo,proto3" json:"addr_to,omitempty"`
	Amount uint64 `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
}

func (m *Transaction_CoinBase) Reset()                    { *m = Transaction_CoinBase{} }
func (m *Transaction_CoinBase) String() string            { return proto.CompactTextString(m) }
func (*Transaction_CoinBase) ProtoMessage()               {}
func (*Transaction_CoinBase) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42, 1} }

func (m *Transaction_CoinBase) GetAddrTo() []byte {
	if m != nil {
		return m.AddrTo
	}
	return nil
}

func (m *Transaction_CoinBase) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type Transaction_LatticePublicKey struct {
	KyberPk     []byte `protobuf:"bytes,1,opt,name=kyber_pk,json=kyberPk,proto3" json:"kyber_pk,omitempty"`
	DilithiumPk []byte `protobuf:"bytes,2,opt,name=dilithium_pk,json=dilithiumPk,proto3" json:"dilithium_pk,omitempty"`
}

func (m *Transaction_LatticePublicKey) Reset()         { *m = Transaction_LatticePublicKey{} }
func (m *Transaction_LatticePublicKey) String() string { return proto.CompactTextString(m) }
func (*Transaction_LatticePublicKey) ProtoMessage()    {}
func (*Transaction_LatticePublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{42, 2}
}

func (m *Transaction_LatticePublicKey) GetKyberPk() []byte {
	if m != nil {
		return m.KyberPk
	}
	return nil
}

func (m *Transaction_LatticePublicKey) GetDilithiumPk() []byte {
	if m != nil {
		return m.DilithiumPk
	}
	return nil
}

type Transaction_Message struct {
	MessageHash []byte `protobuf:"bytes,1,opt,name=message_hash,json=messageHash,proto3" json:"message_hash,omitempty"`
}

func (m *Transaction_Message) Reset()                    { *m = Transaction_Message{} }
func (m *Transaction_Message) String() string            { return proto.CompactTextString(m) }
func (*Transaction_Message) ProtoMessage()               {}
func (*Transaction_Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42, 3} }

func (m *Transaction_Message) GetMessageHash() []byte {
	if m != nil {
		return m.MessageHash
	}
	return nil
}

type Transaction_Token struct {
	Symbol          []byte           `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Name            []byte           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Owner           []byte           `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Decimals        uint64           `protobuf:"varint,4,opt,name=decimals" json:"decimals,omitempty"`
	InitialBalances []*AddressAmount `protobuf:"bytes,5,rep,name=initial_balances,json=initialBalances" json:"initial_balances,omitempty"`
}

func (m *Transaction_Token) Reset()                    { *m = Transaction_Token{} }
func (m *Transaction_Token) String() string            { return proto.CompactTextString(m) }
func (*Transaction_Token) ProtoMessage()               {}
func (*Transaction_Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42, 4} }

func (m *Transaction_Token) GetSymbol() []byte {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *Transaction_Token) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Transaction_Token) GetOwner() []byte {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *Transaction_Token) GetDecimals() uint64 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *Transaction_Token) GetInitialBalances() []*AddressAmount {
	if m != nil {
		return m.InitialBalances
	}
	return nil
}

type Transaction_TransferToken struct {
	TokenTxhash []byte   `protobuf:"bytes,1,opt,name=token_txhash,json=tokenTxhash,proto3" json:"token_txhash,omitempty"`
	AddrsTo     [][]byte `protobuf:"bytes,2,rep,name=addrs_to,json=addrsTo,proto3" json:"addrs_to,omitempty"`
	Amounts     []uint64 `protobuf:"varint,3,rep,packed,name=amounts" json:"amounts,omitempty"`
}

func (m *Transaction_TransferToken) Reset()                    { *m = Transaction_TransferToken{} }
func (m *Transaction_TransferToken) String() string            { return proto.CompactTextString(m) }
func (*Transaction_TransferToken) ProtoMessage()               {}
func (*Transaction_TransferToken) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42, 5} }

func (m *Transaction_TransferToken) GetTokenTxhash() []byte {
	if m != nil {
		return m.TokenTxhash
	}
	return nil
}

func (m *Transaction_TransferToken) GetAddrsTo() [][]byte {
	if m != nil {
		return m.AddrsTo
	}
	return nil
}

func (m *Transaction_TransferToken) GetAmounts() []uint64 {
	if m != nil {
		return m.Amounts
	}
	return nil
}

type Transaction_Slave struct {
	SlavePks    [][]byte `protobuf:"bytes,1,rep,name=slave_pks,json=slavePks,proto3" json:"slave_pks,omitempty"`
	AccessTypes []uint32 `protobuf:"varint,2,rep,packed,name=access_types,json=accessTypes" json:"access_types,omitempty"`
}

func (m *Transaction_Slave) Reset()                    { *m = Transaction_Slave{} }
func (m *Transaction_Slave) String() string            { return proto.CompactTextString(m) }
func (*Transaction_Slave) ProtoMessage()               {}
func (*Transaction_Slave) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42, 6} }

func (m *Transaction_Slave) GetSlavePks() [][]byte {
	if m != nil {
		return m.SlavePks
	}
	return nil
}

func (m *Transaction_Slave) GetAccessTypes() []uint32 {
	if m != nil {
		return m.AccessTypes
	}
	return nil
}

type TokenList struct {
	TokenTxhash [][]byte `protobuf:"bytes,1,rep,name=token_txhash,json=tokenTxhash,proto3" json:"token_txhash,omitempty"`
}

func (m *TokenList) Reset()                    { *m = TokenList{} }
func (m *TokenList) String() string            { return proto.CompactTextString(m) }
func (*TokenList) ProtoMessage()               {}
func (*TokenList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *TokenList) GetTokenTxhash() [][]byte {
	if m != nil {
		return m.TokenTxhash
	}
	return nil
}

type TokenDetailedList struct {
	ExtendedTokens []*TransactionExtended `protobuf:"bytes,1,rep,name=extended_tokens,json=extendedTokens" json:"extended_tokens,omitempty"`
}

func (m *TokenDetailedList) Reset()                    { *m = TokenDetailedList{} }
func (m *TokenDetailedList) String() string            { return proto.CompactTextString(m) }
func (*TokenDetailedList) ProtoMessage()               {}
func (*TokenDetailedList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *TokenDetailedList) GetExtendedTokens() []*TransactionExtended {
	if m != nil {
		return m.ExtendedTokens
	}
	return nil
}

type TokenMetadata struct {
	TokenTxhash           []byte   `protobuf:"bytes,1,opt,name=token_txhash,json=tokenTxhash,proto3" json:"token_txhash,omitempty"`
	TransferTokenTxHashes [][]byte `protobuf:"bytes,2,rep,name=transfer_token_tx_hashes,json=transferTokenTxHashes,proto3" json:"transfer_token_tx_hashes,omitempty"`
}

func (m *TokenMetadata) Reset()                    { *m = TokenMetadata{} }
func (m *TokenMetadata) String() string            { return proto.CompactTextString(m) }
func (*TokenMetadata) ProtoMessage()               {}
func (*TokenMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *TokenMetadata) GetTokenTxhash() []byte {
	if m != nil {
		return m.TokenTxhash
	}
	return nil
}

func (m *TokenMetadata) GetTransferTokenTxHashes() [][]byte {
	if m != nil {
		return m.TransferTokenTxHashes
	}
	return nil
}

type CollectEphemeralMessageReq struct {
	MsgId []byte `protobuf:"bytes,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
}

func (m *CollectEphemeralMessageReq) Reset()                    { *m = CollectEphemeralMessageReq{} }
func (m *CollectEphemeralMessageReq) String() string            { return proto.CompactTextString(m) }
func (*CollectEphemeralMessageReq) ProtoMessage()               {}
func (*CollectEphemeralMessageReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *CollectEphemeralMessageReq) GetMsgId() []byte {
	if m != nil {
		return m.MsgId
	}
	return nil
}

type CollectEphemeralMessageResp struct {
	EphemeralMetadata *EphemeralMetadata `protobuf:"bytes,1,opt,name=ephemeral_metadata,json=ephemeralMetadata" json:"ephemeral_metadata,omitempty"`
}

func (m *CollectEphemeralMessageResp) Reset()                    { *m = CollectEphemeralMessageResp{} }
func (m *CollectEphemeralMessageResp) String() string            { return proto.CompactTextString(m) }
func (*CollectEphemeralMessageResp) ProtoMessage()               {}
func (*CollectEphemeralMessageResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *CollectEphemeralMessageResp) GetEphemeralMetadata() *EphemeralMetadata {
	if m != nil {
		return m.EphemeralMetadata
	}
	return nil
}

type PushEphemeralMessageReq struct {
	EphemeralMessage *EncryptedEphemeralMessage `protobuf:"bytes,1,opt,name=ephemeral_message,json=ephemeralMessage" json:"ephemeral_message,omitempty"`
}

func (m *PushEphemeralMessageReq) Reset()                    { *m = PushEphemeralMessageReq{} }
func (m *PushEphemeralMessageReq) String() string            { return proto.CompactTextString(m) }
func (*PushEphemeralMessageReq) ProtoMessage()               {}
func (*PushEphemeralMessageReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *PushEphemeralMessageReq) GetEphemeralMessage() *EncryptedEphemeralMessage {
	if m != nil {
		return m.EphemeralMessage
	}
	return nil
}

type EncryptedEphemeralMessage struct {
	MsgId   []byte                             `protobuf:"bytes,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	Ttl     uint64                             `protobuf:"varint,2,opt,name=ttl" json:"ttl,omitempty"`
	Ttr     uint64                             `protobuf:"varint,3,opt,name=ttr" json:"ttr,omitempty"`
	Channel *EncryptedEphemeralMessage_Channel `protobuf:"bytes,5,opt,name=channel" json:"channel,omitempty"`
	Nonce   uint64                             `protobuf:"varint,6,opt,name=nonce" json:"nonce,omitempty"`
	Payload []byte                             `protobuf:"bytes,7,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *EncryptedEphemeralMessage) Reset()                    { *m = EncryptedEphemeralMessage{} }
func (m *EncryptedEphemeralMessage) String() string            { return proto.CompactTextString(m) }
func (*EncryptedEphemeralMessage) ProtoMessage()               {}
func (*EncryptedEphemeralMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *EncryptedEphemeralMessage) GetMsgId() []byte {
	if m != nil {
		return m.MsgId
	}
	return nil
}

func (m *EncryptedEphemeralMessage) GetTtl() uint64 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *EncryptedEphemeralMessage) GetTtr() uint64 {
	if m != nil {
		return m.Ttr
	}
	return 0
}

func (m *EncryptedEphemeralMessage) GetChannel() *EncryptedEphemeralMessage_Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *EncryptedEphemeralMessage) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *EncryptedEphemeralMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type EncryptedEphemeralMessage_Channel struct {
	EncAes256Symkey []byte `protobuf:"bytes,4,opt,name=enc_aes256_symkey,json=encAes256Symkey,proto3" json:"enc_aes256_symkey,omitempty"`
}

func (m *EncryptedEphemeralMessage_Channel) Reset()         { *m = EncryptedEphemeralMessage_Channel{} }
func (m *EncryptedEphemeralMessage_Channel) String() string { return proto.CompactTextString(m) }
func (*EncryptedEphemeralMessage_Channel) ProtoMessage()    {}
func (*EncryptedEphemeralMessage_Channel) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{49, 0}
}

func (m *EncryptedEphemeralMessage_Channel) GetEncAes256Symkey() []byte {
	if m != nil {
		return m.EncAes256Symkey
	}
	return nil
}

type EphemeralChannelPayload struct {
	Prf512Seed         []byte `protobuf:"bytes,1,opt,name=prf512_seed,json=prf512Seed,proto3" json:"prf512_seed,omitempty"`
	DilithiumSignature []byte `protobuf:"bytes,2,opt,name=dilithium_signature,json=dilithiumSignature,proto3" json:"dilithium_signature,omitempty"`
	// data)
	AddrFrom []byte `protobuf:"bytes,3,opt,name=addr_from,json=addrFrom,proto3" json:"addr_from,omitempty"`
	Data     []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *EphemeralChannelPayload) Reset()                    { *m = EphemeralChannelPayload{} }
func (m *EphemeralChannelPayload) String() string            { return proto.CompactTextString(m) }
func (*EphemeralChannelPayload) ProtoMessage()               {}
func (*EphemeralChannelPayload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *EphemeralChannelPayload) GetPrf512Seed() []byte {
	if m != nil {
		return m.Prf512Seed
	}
	return nil
}

func (m *EphemeralChannelPayload) GetDilithiumSignature() []byte {
	if m != nil {
		return m.DilithiumSignature
	}
	return nil
}

func (m *EphemeralChannelPayload) GetAddrFrom() []byte {
	if m != nil {
		return m.AddrFrom
	}
	return nil
}

func (m *EphemeralChannelPayload) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type EphemeralMessagePayload struct {
	AddrFrom []byte `protobuf:"bytes,1,opt,name=addr_from,json=addrFrom,proto3" json:"addr_from,omitempty"`
	Data     []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *EphemeralMessagePayload) Reset()                    { *m = EphemeralMessagePayload{} }
func (m *EphemeralMessagePayload) String() string            { return proto.CompactTextString(m) }
func (*EphemeralMessagePayload) ProtoMessage()               {}
func (*EphemeralMessagePayload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *EphemeralMessagePayload) GetAddrFrom() []byte {
	if m != nil {
		return m.AddrFrom
	}
	return nil
}

func (m *EphemeralMessagePayload) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type LatticePublicKeys struct {
	LatticeKeys []*Transaction `protobuf:"bytes,1,rep,name=lattice_keys,json=latticeKeys" json:"lattice_keys,omitempty"`
}

func (m *LatticePublicKeys) Reset()                    { *m = LatticePublicKeys{} }
func (m *LatticePublicKeys) String() string            { return proto.CompactTextString(m) }
func (*LatticePublicKeys) ProtoMessage()               {}
func (*LatticePublicKeys) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *LatticePublicKeys) GetLatticeKeys() []*Transaction {
	if m != nil {
		return m.LatticeKeys
	}
	return nil
}

type EphemeralMetadata struct {
	EncryptedEphemeralMessageList []*EncryptedEphemeralMessage `protobuf:"bytes,2,rep,name=encrypted_ephemeral_message_list,json=encryptedEphemeralMessageList" json:"encrypted_ephemeral_message_list,omitempty"`
}

func (m *EphemeralMetadata) Reset()                    { *m = EphemeralMetadata{} }
func (m *EphemeralMetadata) String() string            { return proto.CompactTextString(m) }
func (*EphemeralMetadata) ProtoMessage()               {}
func (*EphemeralMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *EphemeralMetadata) GetEncryptedEphemeralMessageList() []*EncryptedEphemeralMessage {
	if m != nil {
		return m.EncryptedEphemeralMessageList
	}
	return nil
}

type AddressList struct {
	Addresses [][]byte `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *AddressList) Reset()                    { *m = AddressList{} }
func (m *AddressList) String() string            { return proto.CompactTextString(m) }
func (*AddressList) ProtoMessage()               {}
func (*AddressList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *AddressList) GetAddresses() [][]byte {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type BlockHeightData struct {
	BlockNumber          uint64 `protobuf:"varint,1,opt,name=block_number,json=blockNumber" json:"block_number,omitempty"`
	BlockHeaderhash      []byte `protobuf:"bytes,2,opt,name=block_headerhash,json=blockHeaderhash,proto3" json:"block_headerhash,omitempty"`
	CumulativeDifficulty []byte `protobuf:"bytes,3,opt,name=cumulative_difficulty,json=cumulativeDifficulty,proto3" json:"cumulative_difficulty,omitempty"`
}

func (m *BlockHeightData) Reset()                    { *m = BlockHeightData{} }
func (m *BlockHeightData) String() string            { return proto.CompactTextString(m) }
func (*BlockHeightData) ProtoMessage()               {}
func (*BlockHeightData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *BlockHeightData) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *BlockHeightData) GetBlockHeaderhash() []byte {
	if m != nil {
		return m.BlockHeaderhash
	}
	return nil
}

func (m *BlockHeightData) GetCumulativeDifficulty() []byte {
	if m != nil {
		return m.CumulativeDifficulty
	}
	return nil
}

type BlockMetaData struct {
	IsOrphan             bool     `protobuf:"varint,1,opt,name=is_orphan,json=isOrphan" json:"is_orphan,omitempty"`
	BlockDifficulty      []byte   `protobuf:"bytes,2,opt,name=block_difficulty,json=blockDifficulty,proto3" json:"block_difficulty,omitempty"`
	CumulativeDifficulty []byte   `protobuf:"bytes,3,opt,name=cumulative_difficulty,json=cumulativeDifficulty,proto3" json:"cumulative_difficulty,omitempty"`
	ChildHeaderhashes    [][]byte `protobuf:"bytes,4,rep,name=child_headerhashes,json=childHeaderhashes,proto3" json:"child_headerhashes,omitempty"`
	Last_NHeaderhashes   [][]byte `protobuf:"bytes,5,rep,name=last_N_headerhashes,json=lastNHeaderhashes,proto3" json:"last_N_headerhashes,omitempty"`
}

func (m *BlockMetaData) Reset()                    { *m = BlockMetaData{} }
func (m *BlockMetaData) String() string            { return proto.CompactTextString(m) }
func (*BlockMetaData) ProtoMessage()               {}
func (*BlockMetaData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *BlockMetaData) GetIsOrphan() bool {
	if m != nil {
		return m.IsOrphan
	}
	return false
}

func (m *BlockMetaData) GetBlockDifficulty() []byte {
	if m != nil {
		return m.BlockDifficulty
	}
	return nil
}

func (m *BlockMetaData) GetCumulativeDifficulty() []byte {
	if m != nil {
		return m.CumulativeDifficulty
	}
	return nil
}

func (m *BlockMetaData) GetChildHeaderhashes() [][]byte {
	if m != nil {
		return m.ChildHeaderhashes
	}
	return nil
}

func (m *BlockMetaData) GetLast_NHeaderhashes() [][]byte {
	if m != nil {
		return m.Last_NHeaderhashes
	}
	return nil
}

type BlockNumberMapping struct {
	Headerhash     []byte `protobuf:"bytes,1,opt,name=headerhash,proto3" json:"headerhash,omitempty"`
	PrevHeaderhash []byte `protobuf:"bytes,2,opt,name=prev_headerhash,json=prevHeaderhash,proto3" json:"prev_headerhash,omitempty"`
}

func (m *BlockNumberMapping) Reset()                    { *m = BlockNumberMapping{} }
func (m *BlockNumberMapping) String() string            { return proto.CompactTextString(m) }
func (*BlockNumberMapping) ProtoMessage()               {}
func (*BlockNumberMapping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *BlockNumberMapping) GetHeaderhash() []byte {
	if m != nil {
		return m.Headerhash
	}
	return nil
}

func (m *BlockNumberMapping) GetPrevHeaderhash() []byte {
	if m != nil {
		return m.PrevHeaderhash
	}
	return nil
}

type StateLoader struct {
	Addresses       [][]byte `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	TokenTxhash     [][]byte `protobuf:"bytes,2,rep,name=token_txhash,json=tokenTxhash,proto3" json:"token_txhash,omitempty"`
	Txhash          [][]byte `protobuf:"bytes,3,rep,name=txhash,proto3" json:"txhash,omitempty"`
	TotalCoinSupply uint64   `protobuf:"varint,4,opt,name=total_coin_supply,json=totalCoinSupply" json:"total_coin_supply,omitempty"`
}

func (m *StateLoader) Reset()                    { *m = StateLoader{} }
func (m *StateLoader) String() string            { return proto.CompactTextString(m) }
func (*StateLoader) ProtoMessage()               {}
func (*StateLoader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *StateLoader) GetAddresses() [][]byte {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *StateLoader) GetTokenTxhash() [][]byte {
	if m != nil {
		return m.TokenTxhash
	}
	return nil
}

func (m *StateLoader) GetTxhash() [][]byte {
	if m != nil {
		return m.Txhash
	}
	return nil
}

func (m *StateLoader) GetTotalCoinSupply() uint64 {
	if m != nil {
		return m.TotalCoinSupply
	}
	return 0
}

type StateObjects struct {
	StateLoaders [][]byte `protobuf:"bytes,1,rep,name=state_loaders,json=stateLoaders,proto3" json:"state_loaders,omitempty"`
}

func (m *StateObjects) Reset()                    { *m = StateObjects{} }
func (m *StateObjects) String() string            { return proto.CompactTextString(m) }
func (*StateObjects) ProtoMessage()               {}
func (*StateObjects) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *StateObjects) GetStateLoaders() [][]byte {
	if m != nil {
		return m.StateLoaders
	}
	return nil
}

type LRUStateCache struct {
}

func (m *LRUStateCache) Reset()                    { *m = LRUStateCache{} }
func (m *LRUStateCache) String() string            { return proto.CompactTextString(m) }
func (*LRUStateCache) ProtoMessage()               {}
func (*LRUStateCache) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

type NodeChainState struct {
	BlockNumber          uint64 `protobuf:"varint,1,opt,name=block_number,json=blockNumber" json:"block_number,omitempty"`
	HeaderHash           []byte `protobuf:"bytes,2,opt,name=header_hash,json=headerHash,proto3" json:"header_hash,omitempty"`
	CumulativeDifficulty []byte `protobuf:"bytes,3,opt,name=cumulative_difficulty,json=cumulativeDifficulty,proto3" json:"cumulative_difficulty,omitempty"`
	Timestamp            uint64 `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *NodeChainState) Reset()                    { *m = NodeChainState{} }
func (m *NodeChainState) String() string            { return proto.CompactTextString(m) }
func (*NodeChainState) ProtoMessage()               {}
func (*NodeChainState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *NodeChainState) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *NodeChainState) GetHeaderHash() []byte {
	if m != nil {
		return m.HeaderHash
	}
	return nil
}

func (m *NodeChainState) GetCumulativeDifficulty() []byte {
	if m != nil {
		return m.CumulativeDifficulty
	}
	return nil
}

func (m *NodeChainState) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type NodeHeaderHash struct {
	BlockNumber  uint64   `protobuf:"varint,1,opt,name=block_number,json=blockNumber" json:"block_number,omitempty"`
	Headerhashes [][]byte `protobuf:"bytes,2,rep,name=headerhashes,proto3" json:"headerhashes,omitempty"`
}

func (m *NodeHeaderHash) Reset()                    { *m = NodeHeaderHash{} }
func (m *NodeHeaderHash) String() string            { return proto.CompactTextString(m) }
func (*NodeHeaderHash) ProtoMessage()               {}
func (*NodeHeaderHash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *NodeHeaderHash) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *NodeHeaderHash) GetHeaderhashes() [][]byte {
	if m != nil {
		return m.Headerhashes
	}
	return nil
}

type P2PAcknowledgement struct {
	BytesProcessed uint32 `protobuf:"varint,1,opt,name=bytes_processed,json=bytesProcessed" json:"bytes_processed,omitempty"`
}

func (m *P2PAcknowledgement) Reset()                    { *m = P2PAcknowledgement{} }
func (m *P2PAcknowledgement) String() string            { return proto.CompactTextString(m) }
func (*P2PAcknowledgement) ProtoMessage()               {}
func (*P2PAcknowledgement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *P2PAcknowledgement) GetBytesProcessed() uint32 {
	if m != nil {
		return m.BytesProcessed
	}
	return 0
}

type PeerInfo struct {
	PeerIp                   []byte   `protobuf:"bytes,1,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`
	Port                     uint32   `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	BannedTimestamp          uint32   `protobuf:"varint,3,opt,name=banned_timestamp,json=bannedTimestamp" json:"banned_timestamp,omitempty"`
	Credibility              uint32   `protobuf:"varint,4,opt,name=credibility" json:"credibility,omitempty"`
	LastConnectionsTimestamp []uint32 `protobuf:"varint,5,rep,packed,name=last_connections_timestamp,json=lastConnectionsTimestamp" json:"last_connections_timestamp,omitempty"`
}

func (m *PeerInfo) Reset()                    { *m = PeerInfo{} }
func (m *PeerInfo) String() string            { return proto.CompactTextString(m) }
func (*PeerInfo) ProtoMessage()               {}
func (*PeerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

func (m *PeerInfo) GetPeerIp() []byte {
	if m != nil {
		return m.PeerIp
	}
	return nil
}

func (m *PeerInfo) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *PeerInfo) GetBannedTimestamp() uint32 {
	if m != nil {
		return m.BannedTimestamp
	}
	return 0
}

func (m *PeerInfo) GetCredibility() uint32 {
	if m != nil {
		return m.Credibility
	}
	return 0
}

func (m *PeerInfo) GetLastConnectionsTimestamp() []uint32 {
	if m != nil {
		return m.LastConnectionsTimestamp
	}
	return nil
}

type Peers struct {
	PeerInfoList []*PeerInfo `protobuf:"bytes,1,rep,name=peer_info_list,json=peerInfoList" json:"peer_info_list,omitempty"`
}

func (m *Peers) Reset()                    { *m = Peers{} }
func (m *Peers) String() string            { return proto.CompactTextString(m) }
func (*Peers) ProtoMessage()               {}
func (*Peers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65} }

func (m *Peers) GetPeerInfoList() []*PeerInfo {
	if m != nil {
		return m.PeerInfoList
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "qrl.Empty")
	proto.RegisterType((*GetNodeStateReq)(nil), "qrl.GetNodeStateReq")
	proto.RegisterType((*GetNodeStateResp)(nil), "qrl.GetNodeStateResp")
	proto.RegisterType((*GetKnownPeersReq)(nil), "qrl.GetKnownPeersReq")
	proto.RegisterType((*GetKnownPeersResp)(nil), "qrl.GetKnownPeersResp")
	proto.RegisterType((*GetBlockReq)(nil), "qrl.GetBlockReq")
	proto.RegisterType((*GetBlockResp)(nil), "qrl.GetBlockResp")
	proto.RegisterType((*GetStatsReq)(nil), "qrl.GetStatsReq")
	proto.RegisterType((*GetStatsResp)(nil), "qrl.GetStatsResp")
	proto.RegisterType((*GetAddressFromPKReq)(nil), "qrl.GetAddressFromPKReq")
	proto.RegisterType((*GetAddressFromPKResp)(nil), "qrl.GetAddressFromPKResp")
	proto.RegisterType((*BlockDataPoint)(nil), "qrl.BlockDataPoint")
	proto.RegisterType((*GetAddressStateReq)(nil), "qrl.GetAddressStateReq")
	proto.RegisterType((*GetAddressStateResp)(nil), "qrl.GetAddressStateResp")
	proto.RegisterType((*GetObjectReq)(nil), "qrl.GetObjectReq")
	proto.RegisterType((*GetObjectResp)(nil), "qrl.GetObjectResp")
	proto.RegisterType((*GetLatestDataReq)(nil), "qrl.GetLatestDataReq")
	proto.RegisterType((*GetLatestDataResp)(nil), "qrl.GetLatestDataResp")
	proto.RegisterType((*TransferCoinsReq)(nil), "qrl.TransferCoinsReq")
	proto.RegisterType((*TransferCoinsResp)(nil), "qrl.TransferCoinsResp")
	proto.RegisterType((*PushTransactionReq)(nil), "qrl.PushTransactionReq")
	proto.RegisterType((*PushTransactionResp)(nil), "qrl.PushTransactionResp")
	proto.RegisterType((*TokenTxnReq)(nil), "qrl.TokenTxnReq")
	proto.RegisterType((*TransferTokenTxnReq)(nil), "qrl.TransferTokenTxnReq")
	proto.RegisterType((*SlaveTxnReq)(nil), "qrl.SlaveTxnReq")
	proto.RegisterType((*LatticePublicKeyTxnReq)(nil), "qrl.LatticePublicKeyTxnReq")
	proto.RegisterType((*GetLocalAddressesReq)(nil), "qrl.GetLocalAddressesReq")
	proto.RegisterType((*GetLocalAddressesResp)(nil), "qrl.GetLocalAddressesResp")
	proto.RegisterType((*NodeInfo)(nil), "qrl.NodeInfo")
	proto.RegisterType((*StoredPeers)(nil), "qrl.StoredPeers")
	proto.RegisterType((*Peer)(nil), "qrl.Peer")
	proto.RegisterType((*AddressState)(nil), "qrl.AddressState")
	proto.RegisterType((*LatticePK)(nil), "qrl.LatticePK")
	proto.RegisterType((*AddressAmount)(nil), "qrl.AddressAmount")
	proto.RegisterType((*BlockHeader)(nil), "qrl.BlockHeader")
	proto.RegisterType((*BlockHeaderExtended)(nil), "qrl.BlockHeaderExtended")
	proto.RegisterType((*TransactionCount)(nil), "qrl.TransactionCount")
	proto.RegisterType((*TransactionExtended)(nil), "qrl.TransactionExtended")
	proto.RegisterType((*BlockExtended)(nil), "qrl.BlockExtended")
	proto.RegisterType((*Block)(nil), "qrl.Block")
	proto.RegisterType((*GenesisBalance)(nil), "qrl.GenesisBalance")
	proto.RegisterType((*BlockMetaDataList)(nil), "qrl.BlockMetaDataList")
	proto.RegisterType((*Transaction)(nil), "qrl.Transaction")
	proto.RegisterType((*Transaction_Transfer)(nil), "qrl.Transaction.Transfer")
	proto.RegisterType((*Transaction_CoinBase)(nil), "qrl.Transaction.CoinBase")
	proto.RegisterType((*Transaction_LatticePublicKey)(nil), "qrl.Transaction.LatticePublicKey")
	proto.RegisterType((*Transaction_Message)(nil), "qrl.Transaction.Message")
	proto.RegisterType((*Transaction_Token)(nil), "qrl.Transaction.Token")
	proto.RegisterType((*Transaction_TransferToken)(nil), "qrl.Transaction.TransferToken")
	proto.RegisterType((*Transaction_Slave)(nil), "qrl.Transaction.Slave")
	proto.RegisterType((*TokenList)(nil), "qrl.TokenList")
	proto.RegisterType((*TokenDetailedList)(nil), "qrl.TokenDetailedList")
	proto.RegisterType((*TokenMetadata)(nil), "qrl.TokenMetadata")
	proto.RegisterType((*CollectEphemeralMessageReq)(nil), "qrl.CollectEphemeralMessageReq")
	proto.RegisterType((*CollectEphemeralMessageResp)(nil), "qrl.CollectEphemeralMessageResp")
	proto.RegisterType((*PushEphemeralMessageReq)(nil), "qrl.PushEphemeralMessageReq")
	proto.RegisterType((*EncryptedEphemeralMessage)(nil), "qrl.EncryptedEphemeralMessage")
	proto.RegisterType((*EncryptedEphemeralMessage_Channel)(nil), "qrl.EncryptedEphemeralMessage.Channel")
	proto.RegisterType((*EphemeralChannelPayload)(nil), "qrl.EphemeralChannelPayload")
	proto.RegisterType((*EphemeralMessagePayload)(nil), "qrl.EphemeralMessagePayload")
	proto.RegisterType((*LatticePublicKeys)(nil), "qrl.LatticePublicKeys")
	proto.RegisterType((*EphemeralMetadata)(nil), "qrl.EphemeralMetadata")
	proto.RegisterType((*AddressList)(nil), "qrl.AddressList")
	proto.RegisterType((*BlockHeightData)(nil), "qrl.BlockHeightData")
	proto.RegisterType((*BlockMetaData)(nil), "qrl.BlockMetaData")
	proto.RegisterType((*BlockNumberMapping)(nil), "qrl.BlockNumberMapping")
	proto.RegisterType((*StateLoader)(nil), "qrl.StateLoader")
	proto.RegisterType((*StateObjects)(nil), "qrl.StateObjects")
	proto.RegisterType((*LRUStateCache)(nil), "qrl.LRUStateCache")
	proto.RegisterType((*NodeChainState)(nil), "qrl.NodeChainState")
	proto.RegisterType((*NodeHeaderHash)(nil), "qrl.NodeHeaderHash")
	proto.RegisterType((*P2PAcknowledgement)(nil), "qrl.P2PAcknowledgement")
	proto.RegisterType((*PeerInfo)(nil), "qrl.PeerInfo")
	proto.RegisterType((*Peers)(nil), "qrl.Peers")
	proto.RegisterEnum("qrl.GetLatestDataReq_Filter", GetLatestDataReq_Filter_name, GetLatestDataReq_Filter_value)
	proto.RegisterEnum("qrl.PushTransactionResp_ResponseCode", PushTransactionResp_ResponseCode_name, PushTransactionResp_ResponseCode_value)
	proto.RegisterEnum("qrl.NodeInfo_State", NodeInfo_State_name, NodeInfo_State_value)
}

func init() { proto.RegisterFile("qrl.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 3814 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x3a, 0x4d, 0x73, 0x23, 0x49,
	0x56, 0x2e, 0xd9, 0xb2, 0xa5, 0x27, 0xc9, 0x96, 0xd2, 0x6d, 0xb7, 0x46, 0x33, 0x3d, 0xed, 0xa9,
	0x65, 0x76, 0x7a, 0x7a, 0x76, 0xbd, 0xe0, 0x9e, 0xde, 0x19, 0x76, 0x7a, 0x67, 0x91, 0x3f, 0xba,
	0x6d, 0x6c, 0xcb, 0x8a, 0x92, 0x7b, 0x27, 0x88, 0x18, 0xa2, 0xa2, 0xac, 0x4a, 0xd9, 0x85, 0x4a,
	0x55, 0xd5, 0x95, 0xa9, 0x6e, 0x9b, 0xe0, 0x04, 0x9c, 0x39, 0x10, 0x5c, 0x36, 0xe0, 0x44, 0x40,
	0xf0, 0x0f, 0x38, 0x71, 0x81, 0x3f, 0x40, 0x70, 0xe5, 0xcc, 0x6d, 0x0f, 0xdc, 0xb8, 0x42, 0xe4,
	0xcb, 0xac, 0xaa, 0x2c, 0x7d, 0xd8, 0xee, 0xe1, 0x52, 0x51, 0xf9, 0xf2, 0xe5, 0xc7, 0xfb, 0x7e,
	0x2f, 0x33, 0xa1, 0xfc, 0x26, 0xf6, 0xb7, 0xa3, 0x38, 0xe4, 0x21, 0x59, 0x7c, 0x13, 0xfb, 0xe6,
	0x0a, 0x14, 0x0f, 0x46, 0x11, 0xbf, 0x31, 0x1b, 0xb0, 0xf6, 0x8a, 0xf2, 0x4e, 0xe8, 0xd2, 0x1e,
	0x77, 0x38, 0xb5, 0xe8, 0x1b, 0xf3, 0x39, 0xd4, 0xf3, 0x20, 0x16, 0x91, 0x4f, 0x60, 0xc9, 0x0b,
	0x06, 0x61, 0xd3, 0xd8, 0x32, 0x9e, 0x54, 0x76, 0x6a, 0xdb, 0x62, 0x3a, 0x81, 0x71, 0x14, 0x0c,
	0x42, 0x0b, 0xbb, 0x4c, 0x82, 0xc3, 0x8e, 0x83, 0xf0, 0x5d, 0xd0, 0xa5, 0x34, 0x66, 0x62, 0xaa,
	0x21, 0x34, 0x26, 0x60, 0x2c, 0x22, 0x4f, 0xa1, 0x1c, 0x84, 0x2e, 0xb5, 0xe7, 0x4f, 0x58, 0x0a,
	0xd4, 0x1f, 0x79, 0x0a, 0x95, 0xa1, 0x18, 0x6d, 0x47, 0x62, 0x78, 0xb3, 0xb0, 0xb5, 0xf8, 0xa4,
	0xb2, 0x53, 0x46, 0x6c, 0x31, 0xa1, 0x05, 0xc3, 0x74, 0x6e, 0xf3, 0x0c, 0x2a, 0xaf, 0x28, 0xdf,
	0xf5, 0xc3, 0xfe, 0xd0, 0xa2, 0x6f, 0xc8, 0x26, 0x14, 0xbd, 0xc0, 0xa5, 0xd7, 0xb8, 0xc4, 0xd2,
	0xe1, 0x82, 0x25, 0x9b, 0xe4, 0x31, 0x80, 0x33, 0xe0, 0x34, 0xb6, 0xaf, 0x1c, 0x76, 0xd5, 0x2c,
	0x6c, 0x19, 0x4f, 0xaa, 0x87, 0x0b, 0x56, 0x19, 0x61, 0x87, 0x0e, 0xbb, 0xda, 0x5d, 0x81, 0xe2,
	0x9b, 0x31, 0x8d, 0x6f, 0xcc, 0xef, 0xa1, 0x9a, 0x4d, 0xf8, 0x9e, 0x1b, 0xdf, 0x82, 0xe2, 0x85,
	0x18, 0x88, 0x0b, 0x54, 0x76, 0x00, 0xf1, 0xe4, 0x54, 0xb2, 0xc3, 0x7c, 0x81, 0xdb, 0x15, 0x2c,
	0x16, 0xac, 0x22, 0x3f, 0x05, 0xe2, 0x05, 0x7d, 0x7f, 0xec, 0x52, 0x9b, 0x7b, 0x23, 0xca, 0x68,
	0xec, 0x51, 0x86, 0xab, 0x94, 0xac, 0x86, 0xea, 0x39, 0x4f, 0x3b, 0xcc, 0x3f, 0x5f, 0xc4, 0xcd,
	0xa9, 0xe1, 0xef, 0xb9, 0xb9, 0x07, 0x50, 0xa4, 0x51, 0xd8, 0x97, 0xd4, 0x2f, 0x59, 0xb2, 0x41,
	0x3e, 0x85, 0xd5, 0x71, 0x24, 0xd6, 0xb6, 0x03, 0xca, 0xdf, 0x85, 0xf1, 0xb0, 0xb9, 0x88, 0xdd,
	0x35, 0x09, 0xed, 0x48, 0x20, 0x79, 0x0a, 0x0d, 0x24, 0xc0, 0xf6, 0x1d, 0xc6, 0xed, 0x98, 0xbe,
	0x73, 0x62, 0xb7, 0xb9, 0x84, 0x98, 0x6b, 0xd8, 0x71, 0xe2, 0x30, 0x6e, 0x21, 0x98, 0xfc, 0x18,
	0x24, 0x08, 0x49, 0xb2, 0x47, 0xd4, 0x09, 0x9a, 0x45, 0x39, 0x27, 0x82, 0x05, 0x3d, 0xa7, 0xd4,
	0x09, 0x88, 0x09, 0x35, 0x0d, 0x8f, 0xb9, 0xcd, 0x65, 0xc4, 0xaa, 0xa4, 0x58, 0x3d, 0x97, 0xfc,
	0x04, 0x48, 0x3f, 0xf4, 0x02, 0x66, 0xf3, 0x90, 0x3b, 0xbe, 0xcd, 0xc6, 0x51, 0xe4, 0xdf, 0x34,
	0x57, 0x10, 0xb1, 0x8e, 0x3d, 0xe7, 0xa2, 0xa3, 0x87, 0x70, 0xf2, 0x23, 0xa8, 0x49, 0x6c, 0x3a,
	0xf2, 0x38, 0xa7, 0x6e, 0xb3, 0x84, 0x88, 0x55, 0x04, 0x1e, 0x48, 0x18, 0xf9, 0x16, 0xea, 0xd9,
	0xb2, 0x8a, 0xe3, 0x65, 0x54, 0xb1, 0xf5, 0x4c, 0x5e, 0xfb, 0x0e, 0x77, 0xba, 0xa1, 0x17, 0x70,
	0x45, 0x9e, 0x26, 0x84, 0x4f, 0x61, 0xfd, 0x15, 0xe5, 0x6d, 0xd7, 0x8d, 0x29, 0x63, 0x2f, 0xe3,
	0x70, 0xd4, 0x3d, 0x16, 0xa2, 0x5c, 0x85, 0x42, 0x34, 0x44, 0x19, 0x54, 0xad, 0x42, 0x34, 0x34,
	0x7f, 0x17, 0x1e, 0x4c, 0xa3, 0xb1, 0x88, 0x34, 0x61, 0xc5, 0x91, 0x40, 0x85, 0x9c, 0x34, 0xcd,
	0xbf, 0x2a, 0xc0, 0x6a, 0x7e, 0x71, 0xb2, 0x09, 0xcb, 0xc1, 0x78, 0x74, 0x41, 0x63, 0xa9, 0xcf,
	0x96, 0x6a, 0x91, 0x8f, 0x01, 0x5c, 0x6f, 0x30, 0xf0, 0xfa, 0x63, 0x9f, 0xdf, 0xa0, 0x40, 0xcb,
	0x96, 0x06, 0x21, 0x1f, 0x41, 0x19, 0xa9, 0xe3, 0xce, 0x28, 0x52, 0x02, 0xcd, 0x00, 0xe4, 0x43,
	0xd9, 0x8b, 0xb2, 0x54, 0x42, 0x2c, 0x09, 0x80, 0x90, 0x21, 0x79, 0x0c, 0x15, 0x29, 0xb7, 0xf0,
	0xad, 0xf3, 0xf6, 0x52, 0x49, 0x0e, 0x04, 0xe8, 0x14, 0x21, 0xe4, 0x11, 0x80, 0x30, 0x22, 0x3b,
	0x0a, 0xdf, 0xd1, 0x18, 0x65, 0x56, 0xb0, 0xca, 0x02, 0xd2, 0x15, 0x00, 0x31, 0xfe, 0x8a, 0x3a,
	0x6e, 0x62, 0x6a, 0x2b, 0x48, 0x23, 0x48, 0x90, 0xb0, 0x34, 0xf2, 0x04, 0xea, 0x1a, 0x82, 0x1d,
	0xc5, 0xf4, 0x2d, 0xca, 0xa9, 0x6a, 0xad, 0x66, 0x58, 0xdd, 0x98, 0xbe, 0x35, 0xb7, 0x81, 0x64,
	0x2c, 0x4c, 0x3c, 0xd5, 0x2d, 0x0c, 0xfc, 0x56, 0x97, 0x4c, 0xe6, 0xc6, 0x3e, 0x83, 0x22, 0x13,
	0x0d, 0x65, 0x20, 0x0d, 0x94, 0x72, 0x0e, 0x4b, 0xf6, 0x9b, 0xbf, 0x83, 0xd6, 0x75, 0x76, 0xf1,
	0x27, 0xb4, 0xcf, 0xc5, 0x4a, 0x0f, 0x94, 0x4f, 0x50, 0xeb, 0x28, 0x07, 0xf1, 0x5f, 0x06, 0xd4,
	0x34, 0x34, 0x16, 0x09, 0xbc, 0x41, 0x38, 0x0e, 0x5c, 0x65, 0xb8, 0xb2, 0x41, 0xbe, 0x86, 0x9a,
	0xda, 0x98, 0x2d, 0x97, 0x2f, 0xcc, 0x59, 0xfe, 0x70, 0xc1, 0xaa, 0x3a, 0x5a, 0x9b, 0xbc, 0x80,
	0x0a, 0x8f, 0x9d, 0x80, 0x39, 0x7d, 0xee, 0x85, 0x01, 0xca, 0xaf, 0xb2, 0xd3, 0xc4, 0x71, 0xe7,
	0x19, 0xfc, 0xe0, 0x9a, 0xd3, 0xc0, 0xa5, 0xee, 0xe1, 0x82, 0xa5, 0xa3, 0x93, 0x6f, 0x60, 0x55,
	0xea, 0x37, 0x55, 0x08, 0x28, 0xe2, 0xca, 0x0e, 0xc9, 0xb4, 0x5b, 0x1b, 0x2a, 0x4d, 0x30, 0x01,
	0xec, 0x96, 0x60, 0x39, 0xa6, 0x6c, 0xec, 0x73, 0xf3, 0x3f, 0x0c, 0x74, 0xed, 0x27, 0x0e, 0xa7,
	0x8c, 0x0b, 0x8d, 0x14, 0x1c, 0xf9, 0x12, 0x96, 0x07, 0x9e, 0xcf, 0x95, 0x3e, 0xae, 0xee, 0x7c,
	0x84, 0x73, 0x4e, 0xa2, 0x6d, 0xbf, 0x44, 0x1c, 0x4b, 0xe1, 0x0a, 0x2d, 0x0e, 0x07, 0x03, 0x46,
	0x39, 0xb2, 0xa0, 0x66, 0xa9, 0x16, 0x69, 0x41, 0xe9, 0xcd, 0xd8, 0x09, 0xb8, 0xc7, 0x6f, 0x90,
	0xc8, 0x9a, 0x95, 0xb6, 0xcd, 0x1e, 0x2c, 0xcb, 0x59, 0xc8, 0x0a, 0x2c, 0xb6, 0x4f, 0x4e, 0xea,
	0x0b, 0xa4, 0x0e, 0xd5, 0xdd, 0x93, 0xb3, 0xbd, 0xe3, 0xc3, 0x83, 0xf6, 0xfe, 0x81, 0xd5, 0xab,
	0x1b, 0x02, 0x72, 0x6e, 0xb5, 0x3b, 0xbd, 0xf6, 0xde, 0xf9, 0xd1, 0x59, 0xa7, 0x57, 0x2f, 0x90,
	0x8f, 0xa0, 0xa9, 0x43, 0xec, 0xd7, 0x9d, 0xbd, 0xb3, 0xce, 0xcb, 0x23, 0xeb, 0xf4, 0x60, 0xbf,
	0xbe, 0x28, 0x44, 0xd7, 0x98, 0xd8, 0x2c, 0x8b, 0xc8, 0x0b, 0xa8, 0x22, 0x13, 0xa4, 0xf6, 0x09,
	0xad, 0x5a, 0x4c, 0xf9, 0x8d, 0xec, 0x3a, 0xc4, 0x8e, 0x84, 0x47, 0x56, 0x0e, 0x5b, 0x8c, 0xd6,
	0xb8, 0x9f, 0x44, 0xab, 0xb9, 0xd2, 0xb2, 0x72, 0xd8, 0xa4, 0x07, 0x4d, 0xbd, 0x6d, 0x8f, 0x83,
	0x7e, 0x18, 0x0c, 0xbc, 0x78, 0x44, 0xdd, 0xe6, 0xe2, 0x1d, 0x33, 0x3d, 0xd4, 0x47, 0xbe, 0xce,
	0x06, 0x9a, 0x7f, 0x6b, 0x40, 0x1d, 0x07, 0x0c, 0x68, 0xbc, 0x27, 0x5c, 0x9f, 0x10, 0xdd, 0x63,
	0xa8, 0x8c, 0x1c, 0x26, 0x42, 0xa0, 0xd0, 0x35, 0xa5, 0xd2, 0x20, 0x41, 0x42, 0x1b, 0xc9, 0x27,
	0x90, 0x68, 0x21, 0x15, 0xee, 0x16, 0x09, 0xa9, 0x5a, 0x95, 0x14, 0x76, 0x1e, 0xa2, 0xe9, 0x8d,
	0xc2, 0x71, 0xc0, 0x19, 0x6e, 0x6e, 0xc9, 0x4a, 0x9a, 0xa4, 0x0e, 0x8b, 0x03, 0x4a, 0x95, 0x33,
	0x11, 0xbf, 0xe4, 0x21, 0xac, 0x5c, 0x8f, 0x18, 0xb3, 0xa3, 0x21, 0xfa, 0x90, 0xaa, 0xb5, 0x2c,
	0x9a, 0xdd, 0xa1, 0xf9, 0x06, 0x1a, 0x13, 0x9b, 0x63, 0x11, 0xf9, 0x1e, 0x1e, 0x25, 0xea, 0x6a,
	0x6b, 0x64, 0xd9, 0xe3, 0x80, 0x79, 0x97, 0x01, 0x75, 0x95, 0xed, 0xce, 0x67, 0xc6, 0x87, 0xc9,
	0x70, 0xad, 0xf3, 0xb5, 0x1a, 0x6c, 0xbe, 0x06, 0xd2, 0x1d, 0xb3, 0x2b, 0xad, 0x4b, 0x70, 0xe4,
	0x57, 0x40, 0xf4, 0xa5, 0x72, 0x0b, 0xd5, 0x27, 0x17, 0xb2, 0x1a, 0x1a, 0x6e, 0x4f, 0x4e, 0xfb,
	0xdf, 0x06, 0xac, 0x4f, 0xcd, 0xcb, 0x22, 0xb2, 0x0f, 0x40, 0xe3, 0x38, 0x8c, 0xed, 0x7e, 0xe8,
	0x52, 0x65, 0x29, 0x9f, 0xca, 0xf4, 0x65, 0x1a, 0x7b, 0x5b, 0x7c, 0xc2, 0x80, 0xd1, 0xbd, 0xd0,
	0xa5, 0x56, 0x19, 0x07, 0x8a, 0x5f, 0xf2, 0x05, 0x34, 0xe4, 0x2c, 0x2e, 0x65, 0xfd, 0xd8, 0x8b,
	0xd0, 0x17, 0x48, 0x57, 0x5f, 0xc7, 0x8e, 0xfd, 0x0c, 0x2e, 0xb8, 0xcd, 0xaf, 0xa5, 0xc7, 0x5d,
	0x94, 0xdc, 0xe6, 0xd7, 0xc2, 0x8f, 0x9a, 0x27, 0x50, 0xd5, 0x17, 0x20, 0x15, 0x58, 0x79, 0xdd,
	0x39, 0xee, 0x9c, 0x7d, 0xd7, 0xa9, 0x2f, 0x90, 0x32, 0x14, 0x0f, 0x2c, 0xeb, 0xcc, 0xaa, 0x1b,
	0x64, 0x03, 0x1a, 0xbf, 0x6e, 0x9f, 0x1c, 0xed, 0xb7, 0x85, 0xdd, 0xd8, 0x2f, 0xdb, 0x47, 0x27,
	0x07, 0xfb, 0xf5, 0x02, 0xa9, 0x41, 0xb9, 0xf7, 0x7a, 0xf7, 0xf4, 0xe8, 0xfc, 0x1c, 0x0d, 0xe8,
	0x7f, 0x0c, 0xa8, 0x9c, 0x87, 0x43, 0x1a, 0x9c, 0x5f, 0x07, 0xf7, 0x52, 0xaa, 0x4d, 0x58, 0x66,
	0x37, 0xa3, 0x8b, 0xd0, 0x97, 0x39, 0x97, 0xa5, 0x5a, 0x84, 0xc0, 0x52, 0xe0, 0x8c, 0xa8, 0xda,
	0x2c, 0xfe, 0x0b, 0x37, 0x1a, 0xbe, 0x0b, 0x68, 0x8c, 0x5a, 0x54, 0xb5, 0x64, 0x43, 0x38, 0x09,
	0x97, 0xf6, 0xbd, 0x91, 0xe3, 0x33, 0x15, 0x8c, 0xd2, 0x36, 0xf9, 0x25, 0xd4, 0xbd, 0xc0, 0xe3,
	0x9e, 0xe3, 0xdb, 0x17, 0x8e, 0xef, 0x04, 0x7d, 0xca, 0x9a, 0xcb, 0x68, 0x35, 0x44, 0xf7, 0xb2,
	0x6d, 0x54, 0x52, 0x6b, 0x4d, 0xe1, 0xee, 0x2a, 0xd4, 0x44, 0x69, 0x57, 0x66, 0x2a, 0x6d, 0x29,
	0xa7, 0xb4, 0xff, 0x6a, 0xc0, 0x7a, 0xa2, 0xb5, 0xef, 0xc5, 0x80, 0x7b, 0x58, 0xd5, 0x27, 0x50,
	0xe5, 0x62, 0x4a, 0x9b, 0x5f, 0x6b, 0x02, 0xac, 0x70, 0xb9, 0x8c, 0x00, 0xe9, 0x86, 0xb7, 0x34,
	0xd3, 0xf0, 0x8a, 0x33, 0x69, 0x58, 0xce, 0xd1, 0xf0, 0x1b, 0x03, 0x2a, 0x3d, 0xdf, 0x79, 0x4b,
	0xef, 0xbb, 0xf7, 0x0f, 0xa1, 0xcc, 0x04, 0xbe, 0x1d, 0x0d, 0x99, 0xda, 0x78, 0x09, 0x01, 0xdd,
	0x21, 0x43, 0xc2, 0xfa, 0x7d, 0x11, 0xdd, 0xf8, 0x4d, 0x44, 0xa5, 0x43, 0xa8, 0x59, 0x15, 0x09,
	0x3b, 0x17, 0xa0, 0xf7, 0x71, 0x0a, 0x7f, 0x6f, 0xc0, 0xe6, 0x89, 0xc3, 0xb9, 0xd7, 0xa7, 0xdd,
	0xf1, 0x85, 0xef, 0xf5, 0x8f, 0xe9, 0xcd, 0x7d, 0xb7, 0xf9, 0x01, 0x94, 0x86, 0x37, 0x17, 0x34,
	0x16, 0xb3, 0x4a, 0x2d, 0x5b, 0xc1, 0x76, 0x77, 0x28, 0x36, 0xe9, 0x7a, 0xbe, 0xc7, 0xaf, 0xbc,
	0xf1, 0x48, 0x74, 0x2b, 0xd6, 0xa6, 0xb0, 0xee, 0xf0, 0x7d, 0x36, 0xb9, 0x89, 0x29, 0xdd, 0x49,
	0xd8, 0x77, 0xfc, 0x76, 0x22, 0x3f, 0x59, 0x3b, 0x6d, 0xcc, 0x80, 0xb3, 0x48, 0xa4, 0x61, 0xa9,
	0xa0, 0x31, 0xac, 0x54, 0xad, 0x0c, 0x60, 0xfe, 0xb6, 0x00, 0xa5, 0x24, 0x4f, 0x17, 0x12, 0x7e,
	0x4b, 0x63, 0x26, 0x6c, 0xdc, 0x40, 0x1b, 0x4f, 0x9a, 0xe4, 0xf3, 0x24, 0x7d, 0x29, 0xa0, 0x23,
	0x59, 0xcf, 0xe5, 0xf7, 0xdb, 0x7a, 0x02, 0x43, 0x3e, 0x83, 0xb5, 0x60, 0x3c, 0xb2, 0xfb, 0x61,
	0x10, 0x50, 0x15, 0x8e, 0x64, 0x5c, 0x5d, 0x0d, 0xc6, 0xa3, 0xbd, 0x0c, 0x2a, 0x52, 0x74, 0x81,
	0xa8, 0x57, 0x59, 0x4b, 0x88, 0x58, 0x0b, 0xc6, 0xa3, 0xac, 0x72, 0x13, 0xe6, 0x2b, 0xeb, 0x00,
	0xa5, 0x60, 0xaa, 0x25, 0xf8, 0x2a, 0x73, 0x8c, 0x2b, 0xea, 0x5d, 0x5e, 0xf1, 0x5c, 0xe6, 0x7e,
	0x88, 0xa0, 0xac, 0x0a, 0xc0, 0x8a, 0x41, 0xcb, 0x05, 0x6b, 0x69, 0xbd, 0x80, 0xe9, 0xe0, 0x23,
	0x00, 0x55, 0x79, 0xd8, 0x9e, 0x4c, 0xd8, 0xcb, 0x56, 0x59, 0x41, 0x8e, 0x5c, 0xf3, 0x15, 0x14,
	0x65, 0x52, 0x94, 0x73, 0x5c, 0x55, 0x28, 0xbd, 0xee, 0xf4, 0xfe, 0xa8, 0xb3, 0x77, 0xb0, 0x5f,
	0x37, 0x44, 0x97, 0xf8, 0x3f, 0xea, 0xbc, 0xaa, 0x17, 0x08, 0xc0, 0xb2, 0xea, 0x58, 0x14, 0xff,
	0x2f, 0xcf, 0xac, 0xe3, 0x83, 0xfd, 0xfa, 0x92, 0xb9, 0x0d, 0x95, 0x1e, 0x0f, 0x63, 0xea, 0x4a,
	0xca, 0x1e, 0x43, 0x51, 0xd2, 0x6d, 0x4c, 0x56, 0x97, 0x12, 0x6e, 0x6e, 0xc2, 0x92, 0x68, 0x8a,
	0xbc, 0xde, 0x8b, 0x94, 0x4c, 0x0a, 0x5e, 0x64, 0xfe, 0x66, 0x09, 0xaa, 0x7a, 0xf6, 0x36, 0x3f,
	0x1f, 0x15, 0x3d, 0xca, 0x2d, 0xa9, 0x9a, 0x2b, 0x69, 0x0a, 0x57, 0x17, 0x84, 0x02, 0x2e, 0x73,
	0x73, 0xd9, 0x10, 0x5c, 0x0d, 0x39, 0xb3, 0x2f, 0x3c, 0x3e, 0xf0, 0xa8, 0xef, 0xa2, 0xa9, 0x57,
	0xad, 0x4a, 0xc8, 0xd9, 0xae, 0x02, 0x89, 0x82, 0x51, 0x8f, 0x59, 0x82, 0xad, 0x54, 0xf8, 0x45,
	0x81, 0xa8, 0x47, 0xa8, 0x43, 0xec, 0x20, 0xcf, 0x61, 0x19, 0xdd, 0x48, 0xe2, 0x16, 0x1f, 0x4d,
	0x25, 0x9f, 0xdb, 0xe8, 0xcd, 0xd8, 0x41, 0xc0, 0xe3, 0x1b, 0x4b, 0x21, 0x93, 0xe7, 0xb0, 0xea,
	0x2b, 0x63, 0x3c, 0xb6, 0x7d, 0x8f, 0xf1, 0xe6, 0x0a, 0x0e, 0x5f, 0xc5, 0xe1, 0x89, 0x9d, 0x1e,
	0x5b, 0xb5, 0x14, 0xeb, 0xc4, 0x63, 0x9c, 0x7c, 0x0f, 0x1b, 0xa9, 0xbf, 0xb0, 0x35, 0xe7, 0xd0,
	0x2c, 0xe1, 0xe8, 0xcf, 0xa7, 0x17, 0xef, 0x29, 0x6f, 0xd2, 0x4e, 0xbd, 0x86, 0xdc, 0x08, 0x61,
	0x53, 0x1d, 0xc2, 0x0f, 0x08, 0xee, 0xf4, 0x85, 0xdf, 0xa3, 0x71, 0xb3, 0x2c, 0x0b, 0x93, 0x90,
	0xb3, 0x3d, 0x09, 0x69, 0xfd, 0xbe, 0x8a, 0x4d, 0x92, 0x18, 0x61, 0xd8, 0x43, 0x7a, 0xa3, 0x24,
	0x27, 0x7e, 0x05, 0xd7, 0xdf, 0x3a, 0xfe, 0x38, 0x91, 0x86, 0x6c, 0xfc, 0xa2, 0xf0, 0xb5, 0xd1,
	0x3a, 0x80, 0x87, 0x73, 0xb6, 0x72, 0xd7, 0x34, 0x35, 0x6d, 0x1a, 0xd3, 0x81, 0x72, 0xca, 0x1c,
	0x61, 0x3b, 0xca, 0xa1, 0x1b, 0x49, 0x44, 0x46, 0x5f, 0x3e, 0xe9, 0x93, 0x0a, 0xd3, 0x3e, 0x49,
	0xf7, 0x68, 0x8b, 0x39, 0x8f, 0x66, 0xb6, 0xa1, 0x96, 0x8b, 0x6a, 0xb7, 0xa8, 0xdf, 0x26, 0x2c,
	0xcb, 0x28, 0xa1, 0xe8, 0x55, 0x2d, 0xf3, 0xdf, 0x0b, 0x50, 0xd1, 0xf2, 0x5a, 0xac, 0xd8, 0x44,
	0x25, 0x26, 0x33, 0xda, 0xc4, 0xc1, 0x0a, 0x90, 0x42, 0x48, 0xad, 0x5d, 0xd5, 0xa2, 0x05, 0xcd,
	0xda, 0x3b, 0xb2, 0x20, 0xfd, 0x02, 0x1a, 0x69, 0x7d, 0x69, 0x33, 0xda, 0x0f, 0x03, 0x97, 0x29,
	0xe5, 0xae, 0xa7, 0x1d, 0x3d, 0x09, 0xc7, 0x0a, 0x30, 0x5b, 0x50, 0x56, 0x80, 0x4b, 0xaa, 0x02,
	0x4c, 0x57, 0x15, 0x15, 0xa0, 0x58, 0x59, 0x9e, 0x35, 0xd8, 0xf2, 0x5c, 0x45, 0x7a, 0xa1, 0x8a,
	0x84, 0x21, 0x0d, 0xc2, 0x7f, 0x28, 0x14, 0xe1, 0xc6, 0xa5, 0x23, 0x2a, 0x4b, 0xc8, 0x4b, 0x8a,
	0x5a, 0x33, 0xa2, 0xf1, 0xd0, 0xa7, 0x76, 0x1c, 0x86, 0x3c, 0x29, 0x47, 0x25, 0xc8, 0x0a, 0x43,
	0x2e, 0x96, 0x18, 0x79, 0x81, 0x17, 0x5c, 0xda, 0xd2, 0x22, 0x4b, 0x28, 0xd4, 0x8a, 0x84, 0x75,
	0xd0, 0x2e, 0x1f, 0x43, 0x85, 0x5e, 0xf3, 0xd8, 0x51, 0x18, 0x4a, 0xf3, 0x10, 0x84, 0x08, 0xe6,
	0x5f, 0x18, 0xb0, 0x3e, 0xa3, 0x52, 0x20, 0x4f, 0x60, 0x59, 0x63, 0x6a, 0x92, 0x55, 0x6a, 0x98,
	0x96, 0xea, 0x27, 0xbb, 0xa0, 0x5b, 0xaf, 0x54, 0x72, 0x55, 0x30, 0x6e, 0x4c, 0xa6, 0xa2, 0xa8,
	0xef, 0x56, 0x9d, 0x4f, 0x40, 0xcc, 0xbf, 0x4c, 0xd2, 0x7e, 0x0d, 0x48, 0x7e, 0x0e, 0x45, 0x39,
	0x99, 0xf4, 0x73, 0x5b, 0x33, 0x27, 0xdb, 0xc6, 0xaf, 0x34, 0x3d, 0x89, 0xde, 0xfa, 0x1a, 0x20,
	0x03, 0xea, 0x46, 0x50, 0xbb, 0xcb, 0x08, 0xfe, 0x3a, 0x49, 0x95, 0xf2, 0x19, 0xfa, 0x7b, 0x30,
	0x63, 0x0b, 0x0a, 0xfc, 0x5a, 0x51, 0x3f, 0x9d, 0x88, 0x17, 0xf8, 0xb5, 0xc8, 0x4c, 0x84, 0x96,
	0xdb, 0x83, 0x38, 0x1c, 0x29, 0x0b, 0x29, 0x09, 0xc0, 0xcb, 0x38, 0x1c, 0x89, 0xdc, 0x92, 0x79,
	0x7f, 0x9a, 0x84, 0x74, 0xfc, 0x37, 0xff, 0xd3, 0x80, 0x5a, 0xae, 0xf4, 0x7d, 0x8f, 0xed, 0x9c,
	0xc2, 0xc6, 0xac, 0xda, 0xe4, 0xee, 0x52, 0xef, 0xc1, 0x8c, 0x9a, 0x44, 0x14, 0x8c, 0x6b, 0x97,
	0x34, 0xa0, 0xcc, 0x63, 0x49, 0xd2, 0xaa, 0x2a, 0xbd, 0x75, 0x55, 0x4c, 0x63, 0x9f, 0x4a, 0x52,
	0xad, 0xd5, 0xcb, 0x5c, 0x7b, 0x26, 0x71, 0xff, 0x68, 0x40, 0x51, 0x1a, 0xc3, 0xfd, 0x89, 0xfa,
	0x72, 0x66, 0xd9, 0x3a, 0xcd, 0xed, 0x7c, 0xb9, 0xfa, 0xff, 0xda, 0xbb, 0xb9, 0x0f, 0xab, 0x79,
	0x8c, 0x1f, 0x12, 0x3b, 0xcd, 0xef, 0xa0, 0x81, 0x04, 0x9d, 0x52, 0xee, 0x88, 0x1a, 0x1e, 0x43,
	0xcf, 0x2e, 0xac, 0xeb, 0x2e, 0x2a, 0x09, 0x8c, 0x86, 0x56, 0x0c, 0xe4, 0x06, 0x59, 0x0d, 0xcd,
	0x7b, 0xc9, 0x60, 0x69, 0xfe, 0x4b, 0x19, 0x2a, 0x1a, 0xe9, 0x77, 0x27, 0x9e, 0x2a, 0x75, 0x2c,
	0x64, 0xa9, 0xe3, 0x23, 0x80, 0x08, 0xd3, 0x57, 0x5b, 0x98, 0x8b, 0x54, 0xcc, 0x72, 0x94, 0x24,
	0xb4, 0x22, 0x1f, 0x14, 0x55, 0xa6, 0xc3, 0xc7, 0x31, 0x55, 0x1e, 0x2f, 0x03, 0x64, 0x49, 0x41,
	0x51, 0x4f, 0x0a, 0x3e, 0x87, 0xfa, 0x64, 0xc4, 0x57, 0x79, 0xfd, 0xda, 0x44, 0xbc, 0x27, 0x5f,
	0x41, 0x89, 0xab, 0x1a, 0x05, 0x1d, 0x5d, 0x65, 0xe7, 0x83, 0x49, 0x79, 0x6e, 0x27, 0x45, 0xcc,
	0xe1, 0x82, 0x95, 0x22, 0x8b, 0x81, 0xfd, 0xd0, 0x0b, 0x2e, 0x1c, 0x26, 0xfd, 0xdf, 0xac, 0x81,
	0xa2, 0x56, 0xdf, 0x75, 0x18, 0x15, 0x03, 0x13, 0x64, 0xd2, 0x86, 0x72, 0x9a, 0x02, 0xa0, 0x5f,
	0xac, 0xec, 0x7c, 0x32, 0x35, 0x72, 0x32, 0xaf, 0x3f, 0x5c, 0xb0, 0xb2, 0x51, 0xe4, 0x4b, 0x58,
	0x19, 0x51, 0xc6, 0x9c, 0x4b, 0xda, 0x84, 0xd9, 0x35, 0xfe, 0xf6, 0xa9, 0xec, 0x3f, 0x5c, 0xb0,
	0x12, 0x54, 0xb2, 0x0d, 0x45, 0xcc, 0x55, 0x9a, 0x15, 0x1c, 0xb3, 0x39, 0x4d, 0xa7, 0xe8, 0x3d,
	0x5c, 0xb0, 0x24, 0x1a, 0x79, 0x05, 0xab, 0x09, 0xb5, 0xb6, 0x1c, 0x58, 0xc5, 0x81, 0x1f, 0xcf,
	0x65, 0x50, 0x32, 0x41, 0x8d, 0xeb, 0x00, 0xb1, 0x30, 0xe6, 0x26, 0xcd, 0xda, 0x9c, 0x85, 0x31,
	0x8f, 0x10, 0x0b, 0x23, 0x5a, 0xeb, 0x57, 0x50, 0x4a, 0x66, 0x14, 0x61, 0x5d, 0x68, 0x12, 0xd6,
	0x81, 0xb2, 0x1a, 0x40, 0x75, 0x9f, 0x38, 0x59, 0x29, 0xe4, 0x0a, 0xbc, 0xd6, 0x37, 0x50, 0x4a,
	0x58, 0x2f, 0x2a, 0x13, 0x74, 0x7b, 0x3c, 0x4c, 0x72, 0x0a, 0xd1, 0x3c, 0x0f, 0xe7, 0x85, 0xfa,
	0x56, 0x17, 0xea, 0x93, 0xdc, 0xcf, 0x25, 0x17, 0xc6, 0xed, 0xe5, 0xd2, 0x74, 0x6a, 0xd2, 0xfa,
	0x09, 0xac, 0x28, 0x71, 0x60, 0xe4, 0x94, 0xbf, 0xb6, 0x96, 0xe6, 0x54, 0x14, 0x4c, 0x68, 0x64,
	0xeb, 0x1f, 0x0c, 0x28, 0x4a, 0xbe, 0x65, 0x07, 0x01, 0xc6, 0xcc, 0x83, 0x80, 0xc2, 0xac, 0x83,
	0x80, 0xc5, 0x79, 0x07, 0x01, 0x4b, 0xf7, 0x38, 0x08, 0x28, 0xde, 0xfb, 0x20, 0xa0, 0x75, 0x09,
	0xb5, 0x9c, 0xd8, 0xa7, 0x4a, 0x72, 0x63, 0xba, 0x24, 0xd7, 0x85, 0x59, 0x98, 0x2b, 0xcc, 0xfc,
	0x31, 0x59, 0x4b, 0x54, 0x33, 0x42, 0x2d, 0xf2, 0xa5, 0xb5, 0x71, 0x47, 0x69, 0x5d, 0x98, 0x2a,
	0xad, 0x77, 0x1b, 0xa0, 0x5b, 0xbf, 0x80, 0x99, 0xdb, 0x50, 0xc6, 0xcd, 0xa3, 0x3f, 0x9c, 0x26,
	0x60, 0x71, 0x82, 0x00, 0xf3, 0xd7, 0xd0, 0x40, 0xfc, 0x7d, 0xca, 0x1d, 0xcf, 0xa7, 0x2e, 0x8e,
	0x6b, 0xc3, 0x5a, 0x16, 0xeb, 0x64, 0xe5, 0x60, 0xdc, 0x11, 0xe5, 0x56, 0xd3, 0x28, 0x87, 0xf8,
	0xe6, 0x10, 0x6a, 0xf8, 0x27, 0x5c, 0xad, 0xeb, 0x70, 0xe7, 0x3e, 0xcc, 0xfc, 0x4a, 0x1d, 0x83,
	0xa6, 0xe6, 0x69, 0xab, 0xd3, 0x2c, 0x9a, 0x1c, 0x3c, 0x6c, 0xf0, 0xfc, 0xe9, 0x8b, 0xf2, 0xd9,
	0xcf, 0xa0, 0xb5, 0x17, 0xfa, 0x3e, 0xed, 0xf3, 0x83, 0xe8, 0x8a, 0x8e, 0x68, 0xec, 0xf8, 0x4a,
	0x3d, 0x2d, 0xfa, 0x86, 0x6c, 0xc0, 0xf2, 0x88, 0x5d, 0x8a, 0xba, 0x52, 0x9d, 0xe0, 0x8f, 0xd8,
	0xe5, 0x91, 0x6b, 0xba, 0xf0, 0xe1, 0xdc, 0x41, 0x2c, 0x22, 0x07, 0x40, 0x68, 0x02, 0xb7, 0x47,
	0x8a, 0x0a, 0x15, 0x50, 0xa5, 0xbd, 0x6b, 0xc3, 0x64, 0xaf, 0xd5, 0xa0, 0x93, 0x20, 0x73, 0x00,
	0x0f, 0xbb, 0x63, 0x76, 0x35, 0x6b, 0x5f, 0xc7, 0xd0, 0xd0, 0x57, 0x90, 0xde, 0xcf, 0xd0, 0x1c,
	0xd2, 0x41, 0xd0, 0x8f, 0x6f, 0x22, 0x4e, 0xdd, 0xa9, 0xd1, 0x75, 0x3a, 0x01, 0x31, 0xff, 0xd7,
	0x80, 0x0f, 0xe6, 0xe2, 0xcf, 0x61, 0x81, 0x08, 0x5d, 0x9c, 0xfb, 0x49, 0xe8, 0xe2, 0xdc, 0x97,
	0x90, 0x58, 0xe5, 0xec, 0xe2, 0x97, 0xfc, 0x01, 0xac, 0xf4, 0xaf, 0x9c, 0x20, 0xa0, 0x3e, 0x46,
	0xa4, 0xca, 0xce, 0x8f, 0x6f, 0xdf, 0xdb, 0xf6, 0x9e, 0xc4, 0xb6, 0x92, 0x61, 0x59, 0x44, 0x5b,
	0xd6, 0x23, 0x5a, 0x13, 0x56, 0x22, 0xe7, 0xc6, 0x0f, 0x1d, 0x57, 0xa5, 0xe3, 0x49, 0xb3, 0xf5,
	0x1c, 0x56, 0xd4, 0x1c, 0xe4, 0x29, 0x34, 0x68, 0xd0, 0xb7, 0x1d, 0xca, 0x76, 0x9e, 0xff, 0xdc,
	0x66, 0x37, 0x23, 0x11, 0x50, 0x65, 0xc8, 0x5c, 0xa3, 0x41, 0xbf, 0x8d, 0xf0, 0x1e, 0x82, 0xcd,
	0xbf, 0x33, 0xe0, 0x61, 0xba, 0x19, 0x35, 0x41, 0x57, 0x4e, 0x29, 0x82, 0x78, 0x14, 0x0f, 0x9e,
	0xff, 0xde, 0x8e, 0xcd, 0x28, 0x4d, 0x98, 0x00, 0x12, 0xd4, 0xa3, 0xd4, 0x25, 0x3f, 0x83, 0xf5,
	0xcc, 0xe7, 0x65, 0xd1, 0x59, 0xfa, 0x23, 0x92, 0x76, 0xf5, 0xd2, 0x30, 0x7d, 0x57, 0xee, 0x89,
	0xda, 0x22, 0x77, 0x8a, 0xff, 0xe6, 0x1f, 0x6a, 0xbb, 0x53, 0xac, 0x4a, 0x76, 0x97, 0x9b, 0xcb,
	0x98, 0x33, 0x57, 0x41, 0x9b, 0xeb, 0x10, 0x1a, 0x93, 0x0e, 0x9d, 0x91, 0x67, 0x50, 0x55, 0xf1,
	0x54, 0xa4, 0x1d, 0x89, 0xc5, 0x4e, 0xe7, 0x72, 0x15, 0x85, 0x25, 0x06, 0x99, 0x7f, 0x06, 0x8d,
	0x29, 0x35, 0x26, 0x97, 0xb0, 0x45, 0x13, 0xf1, 0xda, 0x53, 0x2a, 0x2a, 0x8f, 0x02, 0x64, 0xa6,
	0x78, 0x97, 0x9e, 0x3e, 0xa2, 0xf3, 0xba, 0x84, 0x9f, 0x31, 0xbf, 0x80, 0x8a, 0xf2, 0xc9, 0xe8,
	0x76, 0x6e, 0x3f, 0x28, 0xfb, 0x1b, 0x03, 0xd6, 0x76, 0xb3, 0xa3, 0xa5, 0x7d, 0xe5, 0x54, 0x72,
	0x35, 0xa9, 0x31, 0x5d, 0x93, 0x7e, 0x9e, 0x5c, 0xf4, 0xca, 0x94, 0x37, 0xbb, 0xf9, 0x57, 0x77,
	0xba, 0x87, 0x29, 0x98, 0x3c, 0x83, 0x8d, 0xfe, 0x78, 0x34, 0xf6, 0x1d, 0xee, 0xbd, 0xa5, 0xb6,
	0x76, 0xb5, 0x2a, 0xe5, 0xfb, 0x20, 0xeb, 0xdc, 0x4f, 0xfb, 0xcc, 0xdf, 0x26, 0x35, 0x45, 0x92,
	0x54, 0x0a, 0x71, 0x7a, 0xcc, 0x0e, 0xe3, 0xe8, 0xca, 0x09, 0xd4, 0x65, 0x60, 0xc9, 0x63, 0x67,
	0xd8, 0xce, 0xb6, 0x33, 0x71, 0x73, 0x9b, 0x6c, 0x27, 0x9b, 0xf9, 0x07, 0x6d, 0x87, 0xfc, 0x14,
	0x48, 0xff, 0xca, 0xf3, 0x5d, 0x8d, 0x5c, 0xca, 0xd4, 0x19, 0x52, 0x03, 0x7b, 0x0e, 0xb5, 0x0e,
	0xb2, 0x0d, 0xeb, 0x78, 0x32, 0xd7, 0xc9, 0xe3, 0xab, 0xa3, 0x24, 0xd1, 0xd5, 0xd1, 0xf1, 0xcd,
	0x3f, 0x06, 0xb2, 0x9b, 0x31, 0xf7, 0xd4, 0x89, 0x22, 0x2f, 0xb8, 0x24, 0x1f, 0x03, 0x68, 0xdc,
	0x35, 0xf4, 0xcb, 0x5e, 0x64, 0xec, 0x67, 0xb0, 0x26, 0xca, 0xfb, 0x69, 0x11, 0xac, 0x0a, 0x70,
	0xb6, 0x80, 0xa8, 0x1a, 0x2b, 0x78, 0x26, 0x74, 0x12, 0x62, 0x7d, 0x72, 0xab, 0x46, 0x4c, 0x85,
	0x94, 0xc2, 0x54, 0x78, 0xd3, 0x8e, 0x5f, 0x16, 0xb1, 0x33, 0x39, 0x7e, 0x79, 0x0a, 0x0d, 0xf9,
	0x96, 0x40, 0x24, 0xb1, 0xc9, 0x83, 0x02, 0xf5, 0x92, 0x01, 0x3b, 0x44, 0xb6, 0x25, 0xdf, 0x13,
	0x98, 0xcf, 0xa0, 0x8a, 0x7b, 0x92, 0x77, 0xbd, 0x8c, 0xfc, 0x08, 0x6a, 0x78, 0xd0, 0x6a, 0xfb,
	0x61, 0x76, 0x55, 0x58, 0xb5, 0xaa, 0x2c, 0xdb, 0x38, 0x33, 0xd7, 0xa0, 0x76, 0x62, 0xbd, 0xc6,
	0x71, 0x7b, 0x4e, 0xff, 0x8a, 0x9a, 0xff, 0x64, 0xc0, 0x6a, 0x27, 0x74, 0xe9, 0xde, 0x95, 0xe3,
	0x05, 0xf2, 0xcc, 0xf0, 0x1e, 0xda, 0x3b, 0x71, 0x8f, 0x5e, 0x98, 0xba, 0x47, 0xff, 0x41, 0x4a,
	0x92, 0x7b, 0x18, 0xb0, 0x34, 0xf1, 0x30, 0xc0, 0xfc, 0x4e, 0x6e, 0xf4, 0x30, 0x5b, 0xe4, 0x1e,
	0x1b, 0x35, 0xa1, 0x9a, 0xd3, 0x20, 0x29, 0x8b, 0x1c, 0xcc, 0xfc, 0x25, 0x90, 0xee, 0x4e, 0xb7,
	0xdd, 0x1f, 0x06, 0xe1, 0x3b, 0x9f, 0xba, 0x97, 0x74, 0x44, 0x03, 0x2e, 0x94, 0xe3, 0xe2, 0x86,
	0x53, 0x66, 0x47, 0x71, 0x28, 0x52, 0x1b, 0xe5, 0x9f, 0x6b, 0xd6, 0x2a, 0x82, 0xbb, 0x09, 0xd4,
	0xfc, 0x37, 0x03, 0x4a, 0x5d, 0x4a, 0x63, 0x3c, 0x29, 0x7f, 0x08, 0x2b, 0x11, 0xa5, 0xb1, 0xad,
	0x4e, 0x65, 0xab, 0xd6, 0xb2, 0x68, 0x1e, 0x45, 0xc2, 0x5f, 0x46, 0x61, 0x9c, 0x5c, 0x32, 0xe3,
	0x3f, 0x1a, 0x9d, 0x88, 0x07, 0xae, 0x9d, 0x7f, 0x0f, 0x51, 0xb3, 0xd6, 0x24, 0xfc, 0x3c, 0x7d,
	0x15, 0xb1, 0x05, 0x95, 0x7e, 0x4c, 0x5d, 0xef, 0x42, 0xb8, 0xfc, 0x1b, 0x75, 0x1e, 0xae, 0x83,
	0xc8, 0x0b, 0x68, 0xa1, 0xc9, 0x68, 0xe7, 0xeb, 0xda, 0xb4, 0x45, 0xcc, 0xd2, 0x9a, 0x02, 0x43,
	0x3b, 0x6a, 0x4f, 0xe7, 0x37, 0x5f, 0x40, 0x51, 0x1e, 0x3d, 0x3f, 0x83, 0x55, 0x49, 0x40, 0x30,
	0x08, 0xa5, 0x4b, 0x95, 0x0e, 0xbb, 0x96, 0x9e, 0x41, 0xe3, 0xcb, 0x9d, 0x6a, 0xa4, 0xfe, 0x84,
	0x87, 0xdc, 0xf9, 0xe7, 0x12, 0x94, 0xa5, 0xcb, 0x6f, 0x77, 0x8f, 0xc8, 0x37, 0xf8, 0x52, 0x21,
	0x7d, 0xad, 0x45, 0x1e, 0x24, 0xf7, 0xf0, 0xfa, 0x9b, 0xae, 0xd6, 0xc6, 0x0c, 0x28, 0x8b, 0xc8,
	0xb7, 0xf8, 0x7e, 0x41, 0x3b, 0xe5, 0x4f, 0xf1, 0x72, 0xef, 0xb8, 0x5a, 0x9b, 0xb3, 0xc0, 0x2c,
	0x22, 0x3f, 0x83, 0x52, 0xf2, 0x08, 0x89, 0xd4, 0x13, 0x9c, 0xe4, 0x49, 0x53, 0xab, 0x31, 0x01,
	0xc1, 0xfb, 0xd0, 0xb5, 0x89, 0x77, 0x19, 0xe4, 0x61, 0x82, 0x35, 0xf1, 0xba, 0xa3, 0xd5, 0x9c,
	0xdd, 0xc1, 0x22, 0xb2, 0x03, 0xe5, 0xf4, 0xd9, 0x05, 0x49, 0x57, 0x49, 0x5f, 0x6b, 0xb4, 0xc8,
	0x24, 0x28, 0x25, 0x35, 0xbb, 0xef, 0xcf, 0x48, 0xcd, 0x3d, 0x58, 0xc8, 0x48, 0x9d, 0x78, 0x1a,
	0xf0, 0x6d, 0x56, 0x18, 0xe0, 0x5d, 0x35, 0xd1, 0x0e, 0xe3, 0xb4, 0xcb, 0xf5, 0xd6, 0xe6, 0x2c,
	0xb0, 0xa4, 0x7c, 0xe2, 0xca, 0x57, 0x51, 0x3e, 0x7d, 0x1d, 0xad, 0x28, 0x9f, 0x75, 0x9f, 0xfc,
	0x15, 0x3e, 0x1a, 0x4b, 0xae, 0x1d, 0x15, 0xcf, 0xb5, 0x5b, 0xc8, 0xb9, 0xcb, 0xbf, 0xc2, 0x07,
	0x31, 0x93, 0xf7, 0x96, 0xa4, 0x99, 0x43, 0xbf, 0xcf, 0x44, 0x72, 0x07, 0xc9, 0xe5, 0xa1, 0xda,
	0x81, 0x76, 0x97, 0x38, 0x77, 0xe0, 0x29, 0x6c, 0x4a, 0xae, 0x4e, 0xde, 0xec, 0x91, 0x0f, 0x73,
	0x77, 0x09, 0xf9, 0x3b, 0xbf, 0x5b, 0x08, 0xaa, 0x4f, 0x3e, 0xaa, 0x22, 0x93, 0x1a, 0x93, 0x3e,
	0xc9, 0x6a, 0x7d, 0x30, 0xa7, 0x87, 0x45, 0xa4, 0x03, 0x0f, 0x66, 0x25, 0xe7, 0xe4, 0xa3, 0x54,
	0x08, 0x33, 0xf2, 0xf6, 0x5b, 0x44, 0xf4, 0x3d, 0x3c, 0x9c, 0x53, 0x52, 0x90, 0xc7, 0x38, 0x68,
	0x7e, 0x95, 0xd2, 0xda, 0xba, 0x1d, 0x81, 0x45, 0xe4, 0x17, 0x78, 0xf1, 0x38, 0x5d, 0xad, 0xc9,
	0x07, 0x86, 0xf8, 0xa6, 0x33, 0x61, 0xd9, 0x24, 0xce, 0x0e, 0x40, 0xa9, 0xed, 0x8e, 0xbc, 0xa0,
	0xdd, 0x3d, 0xba, 0x58, 0xc6, 0xc7, 0xa0, 0xcf, 0xfe, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x67, 0xc2,
	0xed, 0x3d, 0x19, 0x2a, 0x00, 0x00,
}
