// Code generated by protoc-gen-go. DO NOT EDIT.
// source: btc.proto

/*
Package btc is a generated protocol buffer package.

It is generated from these files:
	btc.proto

It has these top-level messages:
	Message
	Block
	Coinbase
	CoinbaseInput
	Transaction
	Operation
	Script
	TxInput
	TxOutput
	NetAddress
	InventoryVector
	Version
	Verack
	Addr
	Inv
	GetData
	NotFound
	GetBlocks
	GetHeaders
	GetAddr
	Mempool
	Ping
	Pong
	Alert
	Reject
	FilterLoad
	FilterAdd
	FilterClear
	MerkleBlock
	NodeState
*/
package btc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message_Command int32

const (
	Message_VERSION      Message_Command = 0
	Message_VERACK       Message_Command = 1
	Message_ADDR         Message_Command = 2
	Message_INV          Message_Command = 3
	Message_GET_DATA     Message_Command = 4
	Message_NOT_FOUND    Message_Command = 5
	Message_GET_BLOCKS   Message_Command = 6
	Message_GET_HEADERS  Message_Command = 7
	Message_TX           Message_Command = 8
	Message_BLOCK        Message_Command = 9
	Message_HEADERS      Message_Command = 10
	Message_GET_ADDR     Message_Command = 11
	Message_MEMPOOL      Message_Command = 12
	Message_PING         Message_Command = 13
	Message_PONG         Message_Command = 14
	Message_REJECT       Message_Command = 15
	Message_ALERT        Message_Command = 16
	Message_FILTER_LOAD  Message_Command = 17
	Message_FILTER_ADD   Message_Command = 18
	Message_FILTER_CLEAR Message_Command = 19
	Message_MERKLE_BLOCK Message_Command = 20
)

var Message_Command_name = map[int32]string{
	0:  "VERSION",
	1:  "VERACK",
	2:  "ADDR",
	3:  "INV",
	4:  "GET_DATA",
	5:  "NOT_FOUND",
	6:  "GET_BLOCKS",
	7:  "GET_HEADERS",
	8:  "TX",
	9:  "BLOCK",
	10: "HEADERS",
	11: "GET_ADDR",
	12: "MEMPOOL",
	13: "PING",
	14: "PONG",
	15: "REJECT",
	16: "ALERT",
	17: "FILTER_LOAD",
	18: "FILTER_ADD",
	19: "FILTER_CLEAR",
	20: "MERKLE_BLOCK",
}
var Message_Command_value = map[string]int32{
	"VERSION":      0,
	"VERACK":       1,
	"ADDR":         2,
	"INV":          3,
	"GET_DATA":     4,
	"NOT_FOUND":    5,
	"GET_BLOCKS":   6,
	"GET_HEADERS":  7,
	"TX":           8,
	"BLOCK":        9,
	"HEADERS":      10,
	"GET_ADDR":     11,
	"MEMPOOL":      12,
	"PING":         13,
	"PONG":         14,
	"REJECT":       15,
	"ALERT":        16,
	"FILTER_LOAD":  17,
	"FILTER_ADD":   18,
	"FILTER_CLEAR": 19,
	"MERKLE_BLOCK": 20,
}

func (x Message_Command) String() string {
	return proto.EnumName(Message_Command_name, int32(x))
}
func (Message_Command) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Operation_Code int32

const (
	Operation_OP_FALSE               Operation_Code = 0
	Operation_OP_0                   Operation_Code = 0
	Operation_OP_PUSH1               Operation_Code = 1
	Operation_OP_PUSH2               Operation_Code = 2
	Operation_OP_PUSH3               Operation_Code = 3
	Operation_OP_PUSH4               Operation_Code = 4
	Operation_OP_PUSH5               Operation_Code = 5
	Operation_OP_PUSH6               Operation_Code = 6
	Operation_OP_PUSH7               Operation_Code = 7
	Operation_OP_PUSH8               Operation_Code = 8
	Operation_OP_PUSH9               Operation_Code = 9
	Operation_OP_PUSH10              Operation_Code = 10
	Operation_OP_PUSH11              Operation_Code = 11
	Operation_OP_PUSH12              Operation_Code = 12
	Operation_OP_PUSH13              Operation_Code = 13
	Operation_OP_PUSH14              Operation_Code = 14
	Operation_OP_PUSH15              Operation_Code = 15
	Operation_OP_PUSH16              Operation_Code = 16
	Operation_OP_PUSH17              Operation_Code = 17
	Operation_OP_PUSH18              Operation_Code = 18
	Operation_OP_PUSH19              Operation_Code = 19
	Operation_OP_PUSH20              Operation_Code = 20
	Operation_OP_PUSH21              Operation_Code = 21
	Operation_OP_PUSH22              Operation_Code = 22
	Operation_OP_PUSH23              Operation_Code = 23
	Operation_OP_PUSH24              Operation_Code = 24
	Operation_OP_PUSH25              Operation_Code = 25
	Operation_OP_PUSH26              Operation_Code = 26
	Operation_OP_PUSH27              Operation_Code = 27
	Operation_OP_PUSH28              Operation_Code = 28
	Operation_OP_PUSH29              Operation_Code = 29
	Operation_OP_PUSH30              Operation_Code = 30
	Operation_OP_PUSH31              Operation_Code = 31
	Operation_OP_PUSH32              Operation_Code = 32
	Operation_OP_PUSH33              Operation_Code = 33
	Operation_OP_PUSH34              Operation_Code = 34
	Operation_OP_PUSH35              Operation_Code = 35
	Operation_OP_PUSH36              Operation_Code = 36
	Operation_OP_PUSH37              Operation_Code = 37
	Operation_OP_PUSH38              Operation_Code = 38
	Operation_OP_PUSH39              Operation_Code = 39
	Operation_OP_PUSH40              Operation_Code = 40
	Operation_OP_PUSH41              Operation_Code = 41
	Operation_OP_PUSH42              Operation_Code = 42
	Operation_OP_PUSH43              Operation_Code = 43
	Operation_OP_PUSH44              Operation_Code = 44
	Operation_OP_PUSH45              Operation_Code = 45
	Operation_OP_PUSH46              Operation_Code = 46
	Operation_OP_PUSH47              Operation_Code = 47
	Operation_OP_PUSH48              Operation_Code = 48
	Operation_OP_PUSH49              Operation_Code = 49
	Operation_OP_PUSH50              Operation_Code = 50
	Operation_OP_PUSH51              Operation_Code = 51
	Operation_OP_PUSH52              Operation_Code = 52
	Operation_OP_PUSH53              Operation_Code = 53
	Operation_OP_PUSH54              Operation_Code = 54
	Operation_OP_PUSH55              Operation_Code = 55
	Operation_OP_PUSH56              Operation_Code = 56
	Operation_OP_PUSH57              Operation_Code = 57
	Operation_OP_PUSH58              Operation_Code = 58
	Operation_OP_PUSH59              Operation_Code = 59
	Operation_OP_PUSH60              Operation_Code = 60
	Operation_OP_PUSH61              Operation_Code = 61
	Operation_OP_PUSH62              Operation_Code = 62
	Operation_OP_PUSH63              Operation_Code = 63
	Operation_OP_PUSH64              Operation_Code = 64
	Operation_OP_PUSH65              Operation_Code = 65
	Operation_OP_PUSH66              Operation_Code = 66
	Operation_OP_PUSH67              Operation_Code = 67
	Operation_OP_PUSH68              Operation_Code = 68
	Operation_OP_PUSH69              Operation_Code = 69
	Operation_OP_PUSH70              Operation_Code = 70
	Operation_OP_PUSH71              Operation_Code = 71
	Operation_OP_PUSH72              Operation_Code = 72
	Operation_OP_PUSH73              Operation_Code = 73
	Operation_OP_PUSH74              Operation_Code = 74
	Operation_OP_PUSH75              Operation_Code = 75
	Operation_OP_PUSHDATA            Operation_Code = 76
	Operation_OP_PUSHDATA2           Operation_Code = 77
	Operation_OP_PUSHDATA4           Operation_Code = 78
	Operation_OP_1NEGATE             Operation_Code = 79
	Operation_OP_RESERVED            Operation_Code = 80
	Operation_OP_TRUE                Operation_Code = 81
	Operation_OP_1                   Operation_Code = 81
	Operation_OP_2                   Operation_Code = 82
	Operation_OP_3                   Operation_Code = 83
	Operation_OP_4                   Operation_Code = 84
	Operation_OP_5                   Operation_Code = 85
	Operation_OP_6                   Operation_Code = 86
	Operation_OP_7                   Operation_Code = 87
	Operation_OP_8                   Operation_Code = 88
	Operation_OP_9                   Operation_Code = 89
	Operation_OP_10                  Operation_Code = 90
	Operation_OP_11                  Operation_Code = 91
	Operation_OP_12                  Operation_Code = 92
	Operation_OP_13                  Operation_Code = 93
	Operation_OP_14                  Operation_Code = 94
	Operation_OP_15                  Operation_Code = 95
	Operation_OP_16                  Operation_Code = 96
	Operation_OP_NOP                 Operation_Code = 97
	Operation_OP_VER                 Operation_Code = 98
	Operation_OP_IF                  Operation_Code = 99
	Operation_OP_NOTIF               Operation_Code = 100
	Operation_OP_VERIF               Operation_Code = 101
	Operation_OP_VERNOTIF            Operation_Code = 102
	Operation_OP_ELSE                Operation_Code = 103
	Operation_OP_ENDIF               Operation_Code = 104
	Operation_OP_VERIFY              Operation_Code = 105
	Operation_OP_RETURN              Operation_Code = 106
	Operation_OP_TOALTSTACK          Operation_Code = 107
	Operation_OP_FROMALTSTACK        Operation_Code = 108
	Operation_OP_2DROP               Operation_Code = 109
	Operation_OP_2DUP                Operation_Code = 110
	Operation_OP_3DUP                Operation_Code = 111
	Operation_OP_2OVER               Operation_Code = 112
	Operation_OP_2ROT                Operation_Code = 113
	Operation_OP_2SWAP               Operation_Code = 114
	Operation_OP_IFDUP               Operation_Code = 115
	Operation_OP_DEPTH               Operation_Code = 116
	Operation_OP_DROP                Operation_Code = 117
	Operation_OP_DUP                 Operation_Code = 118
	Operation_OP_NIP                 Operation_Code = 119
	Operation_OP_OVER                Operation_Code = 120
	Operation_OP_PICK                Operation_Code = 121
	Operation_OP_ROLL                Operation_Code = 122
	Operation_OP_ROT                 Operation_Code = 123
	Operation_OP_SWAP                Operation_Code = 124
	Operation_OP_TUCK                Operation_Code = 125
	Operation_OP_CAT                 Operation_Code = 126
	Operation_OP_SUBSTR              Operation_Code = 127
	Operation_OP_LEFT                Operation_Code = 128
	Operation_OP_RIGHT               Operation_Code = 129
	Operation_OP_SIZE                Operation_Code = 130
	Operation_OP_INVERT              Operation_Code = 131
	Operation_OP_AND                 Operation_Code = 132
	Operation_OP_OR                  Operation_Code = 133
	Operation_OP_XOR                 Operation_Code = 134
	Operation_OP_EQUAL               Operation_Code = 135
	Operation_OP_EQUALVERIFY         Operation_Code = 136
	Operation_OP_RESERVED1           Operation_Code = 137
	Operation_OP_RESERVED2           Operation_Code = 138
	Operation_OP_1ADD                Operation_Code = 139
	Operation_OP_1SUB                Operation_Code = 140
	Operation_OP_2MUL                Operation_Code = 141
	Operation_OP_2DIV                Operation_Code = 142
	Operation_OP_NEGATE              Operation_Code = 143
	Operation_OP_ABS                 Operation_Code = 144
	Operation_OP_NOT                 Operation_Code = 145
	Operation_OP_0NOTEQUAL           Operation_Code = 146
	Operation_OP_ADD                 Operation_Code = 147
	Operation_OP_SUB                 Operation_Code = 148
	Operation_OP_MUL                 Operation_Code = 149
	Operation_OP_DIV                 Operation_Code = 150
	Operation_OP_MOD                 Operation_Code = 151
	Operation_OP_LSHIFT              Operation_Code = 152
	Operation_OP_RSHIFT              Operation_Code = 153
	Operation_OP_BOOLAND             Operation_Code = 154
	Operation_OP_BOOLOR              Operation_Code = 155
	Operation_OP_NUMEQUAL            Operation_Code = 156
	Operation_OP_NUMEQUALVERIFY      Operation_Code = 157
	Operation_OP_NUMNOTEQUAL         Operation_Code = 158
	Operation_OP_LESSTHAN            Operation_Code = 159
	Operation_OP_GREATERTHAN         Operation_Code = 160
	Operation_OP_LESSTHANOREQUAL     Operation_Code = 161
	Operation_OP_GREATERTHANOREQUAL  Operation_Code = 162
	Operation_OP_MIN                 Operation_Code = 163
	Operation_OP_MAX                 Operation_Code = 164
	Operation_OP_WITHIN              Operation_Code = 165
	Operation_OP_RIPEMD160           Operation_Code = 166
	Operation_OP_SHA1                Operation_Code = 167
	Operation_OP_SHA256              Operation_Code = 168
	Operation_OP_HASH160             Operation_Code = 169
	Operation_OP_HASH256             Operation_Code = 170
	Operation_OP_CODESEPARATOR       Operation_Code = 171
	Operation_OP_CHECKSIG            Operation_Code = 172
	Operation_OP_CHECKSIGVERIFY      Operation_Code = 173
	Operation_OP_CHECKMULTISIG       Operation_Code = 174
	Operation_OP_CHECKMULTISIGVERIFY Operation_Code = 175
	Operation_OP_NOP1                Operation_Code = 176
	Operation_OP_NOP2                Operation_Code = 177
	Operation_OP_NOP3                Operation_Code = 178
	Operation_OP_NOP4                Operation_Code = 179
	Operation_OP_NOP5                Operation_Code = 180
	Operation_OP_NOP6                Operation_Code = 181
	Operation_OP_NOP7                Operation_Code = 182
	Operation_OP_NOP8                Operation_Code = 183
	Operation_OP_NOP9                Operation_Code = 184
	Operation_OP_NOP10               Operation_Code = 185
)

var Operation_Code_name = map[int32]string{
	0: "OP_FALSE",
	// Duplicate value: 0: "OP_0",
	1:  "OP_PUSH1",
	2:  "OP_PUSH2",
	3:  "OP_PUSH3",
	4:  "OP_PUSH4",
	5:  "OP_PUSH5",
	6:  "OP_PUSH6",
	7:  "OP_PUSH7",
	8:  "OP_PUSH8",
	9:  "OP_PUSH9",
	10: "OP_PUSH10",
	11: "OP_PUSH11",
	12: "OP_PUSH12",
	13: "OP_PUSH13",
	14: "OP_PUSH14",
	15: "OP_PUSH15",
	16: "OP_PUSH16",
	17: "OP_PUSH17",
	18: "OP_PUSH18",
	19: "OP_PUSH19",
	20: "OP_PUSH20",
	21: "OP_PUSH21",
	22: "OP_PUSH22",
	23: "OP_PUSH23",
	24: "OP_PUSH24",
	25: "OP_PUSH25",
	26: "OP_PUSH26",
	27: "OP_PUSH27",
	28: "OP_PUSH28",
	29: "OP_PUSH29",
	30: "OP_PUSH30",
	31: "OP_PUSH31",
	32: "OP_PUSH32",
	33: "OP_PUSH33",
	34: "OP_PUSH34",
	35: "OP_PUSH35",
	36: "OP_PUSH36",
	37: "OP_PUSH37",
	38: "OP_PUSH38",
	39: "OP_PUSH39",
	40: "OP_PUSH40",
	41: "OP_PUSH41",
	42: "OP_PUSH42",
	43: "OP_PUSH43",
	44: "OP_PUSH44",
	45: "OP_PUSH45",
	46: "OP_PUSH46",
	47: "OP_PUSH47",
	48: "OP_PUSH48",
	49: "OP_PUSH49",
	50: "OP_PUSH50",
	51: "OP_PUSH51",
	52: "OP_PUSH52",
	53: "OP_PUSH53",
	54: "OP_PUSH54",
	55: "OP_PUSH55",
	56: "OP_PUSH56",
	57: "OP_PUSH57",
	58: "OP_PUSH58",
	59: "OP_PUSH59",
	60: "OP_PUSH60",
	61: "OP_PUSH61",
	62: "OP_PUSH62",
	63: "OP_PUSH63",
	64: "OP_PUSH64",
	65: "OP_PUSH65",
	66: "OP_PUSH66",
	67: "OP_PUSH67",
	68: "OP_PUSH68",
	69: "OP_PUSH69",
	70: "OP_PUSH70",
	71: "OP_PUSH71",
	72: "OP_PUSH72",
	73: "OP_PUSH73",
	74: "OP_PUSH74",
	75: "OP_PUSH75",
	76: "OP_PUSHDATA",
	77: "OP_PUSHDATA2",
	78: "OP_PUSHDATA4",
	79: "OP_1NEGATE",
	80: "OP_RESERVED",
	81: "OP_TRUE",
	// Duplicate value: 81: "OP_1",
	82:  "OP_2",
	83:  "OP_3",
	84:  "OP_4",
	85:  "OP_5",
	86:  "OP_6",
	87:  "OP_7",
	88:  "OP_8",
	89:  "OP_9",
	90:  "OP_10",
	91:  "OP_11",
	92:  "OP_12",
	93:  "OP_13",
	94:  "OP_14",
	95:  "OP_15",
	96:  "OP_16",
	97:  "OP_NOP",
	98:  "OP_VER",
	99:  "OP_IF",
	100: "OP_NOTIF",
	101: "OP_VERIF",
	102: "OP_VERNOTIF",
	103: "OP_ELSE",
	104: "OP_ENDIF",
	105: "OP_VERIFY",
	106: "OP_RETURN",
	107: "OP_TOALTSTACK",
	108: "OP_FROMALTSTACK",
	109: "OP_2DROP",
	110: "OP_2DUP",
	111: "OP_3DUP",
	112: "OP_2OVER",
	113: "OP_2ROT",
	114: "OP_2SWAP",
	115: "OP_IFDUP",
	116: "OP_DEPTH",
	117: "OP_DROP",
	118: "OP_DUP",
	119: "OP_NIP",
	120: "OP_OVER",
	121: "OP_PICK",
	122: "OP_ROLL",
	123: "OP_ROT",
	124: "OP_SWAP",
	125: "OP_TUCK",
	126: "OP_CAT",
	127: "OP_SUBSTR",
	128: "OP_LEFT",
	129: "OP_RIGHT",
	130: "OP_SIZE",
	131: "OP_INVERT",
	132: "OP_AND",
	133: "OP_OR",
	134: "OP_XOR",
	135: "OP_EQUAL",
	136: "OP_EQUALVERIFY",
	137: "OP_RESERVED1",
	138: "OP_RESERVED2",
	139: "OP_1ADD",
	140: "OP_1SUB",
	141: "OP_2MUL",
	142: "OP_2DIV",
	143: "OP_NEGATE",
	144: "OP_ABS",
	145: "OP_NOT",
	146: "OP_0NOTEQUAL",
	147: "OP_ADD",
	148: "OP_SUB",
	149: "OP_MUL",
	150: "OP_DIV",
	151: "OP_MOD",
	152: "OP_LSHIFT",
	153: "OP_RSHIFT",
	154: "OP_BOOLAND",
	155: "OP_BOOLOR",
	156: "OP_NUMEQUAL",
	157: "OP_NUMEQUALVERIFY",
	158: "OP_NUMNOTEQUAL",
	159: "OP_LESSTHAN",
	160: "OP_GREATERTHAN",
	161: "OP_LESSTHANOREQUAL",
	162: "OP_GREATERTHANOREQUAL",
	163: "OP_MIN",
	164: "OP_MAX",
	165: "OP_WITHIN",
	166: "OP_RIPEMD160",
	167: "OP_SHA1",
	168: "OP_SHA256",
	169: "OP_HASH160",
	170: "OP_HASH256",
	171: "OP_CODESEPARATOR",
	172: "OP_CHECKSIG",
	173: "OP_CHECKSIGVERIFY",
	174: "OP_CHECKMULTISIG",
	175: "OP_CHECKMULTISIGVERIFY",
	176: "OP_NOP1",
	177: "OP_NOP2",
	178: "OP_NOP3",
	179: "OP_NOP4",
	180: "OP_NOP5",
	181: "OP_NOP6",
	182: "OP_NOP7",
	183: "OP_NOP8",
	184: "OP_NOP9",
	185: "OP_NOP10",
}
var Operation_Code_value = map[string]int32{
	"OP_FALSE":               0,
	"OP_0":                   0,
	"OP_PUSH1":               1,
	"OP_PUSH2":               2,
	"OP_PUSH3":               3,
	"OP_PUSH4":               4,
	"OP_PUSH5":               5,
	"OP_PUSH6":               6,
	"OP_PUSH7":               7,
	"OP_PUSH8":               8,
	"OP_PUSH9":               9,
	"OP_PUSH10":              10,
	"OP_PUSH11":              11,
	"OP_PUSH12":              12,
	"OP_PUSH13":              13,
	"OP_PUSH14":              14,
	"OP_PUSH15":              15,
	"OP_PUSH16":              16,
	"OP_PUSH17":              17,
	"OP_PUSH18":              18,
	"OP_PUSH19":              19,
	"OP_PUSH20":              20,
	"OP_PUSH21":              21,
	"OP_PUSH22":              22,
	"OP_PUSH23":              23,
	"OP_PUSH24":              24,
	"OP_PUSH25":              25,
	"OP_PUSH26":              26,
	"OP_PUSH27":              27,
	"OP_PUSH28":              28,
	"OP_PUSH29":              29,
	"OP_PUSH30":              30,
	"OP_PUSH31":              31,
	"OP_PUSH32":              32,
	"OP_PUSH33":              33,
	"OP_PUSH34":              34,
	"OP_PUSH35":              35,
	"OP_PUSH36":              36,
	"OP_PUSH37":              37,
	"OP_PUSH38":              38,
	"OP_PUSH39":              39,
	"OP_PUSH40":              40,
	"OP_PUSH41":              41,
	"OP_PUSH42":              42,
	"OP_PUSH43":              43,
	"OP_PUSH44":              44,
	"OP_PUSH45":              45,
	"OP_PUSH46":              46,
	"OP_PUSH47":              47,
	"OP_PUSH48":              48,
	"OP_PUSH49":              49,
	"OP_PUSH50":              50,
	"OP_PUSH51":              51,
	"OP_PUSH52":              52,
	"OP_PUSH53":              53,
	"OP_PUSH54":              54,
	"OP_PUSH55":              55,
	"OP_PUSH56":              56,
	"OP_PUSH57":              57,
	"OP_PUSH58":              58,
	"OP_PUSH59":              59,
	"OP_PUSH60":              60,
	"OP_PUSH61":              61,
	"OP_PUSH62":              62,
	"OP_PUSH63":              63,
	"OP_PUSH64":              64,
	"OP_PUSH65":              65,
	"OP_PUSH66":              66,
	"OP_PUSH67":              67,
	"OP_PUSH68":              68,
	"OP_PUSH69":              69,
	"OP_PUSH70":              70,
	"OP_PUSH71":              71,
	"OP_PUSH72":              72,
	"OP_PUSH73":              73,
	"OP_PUSH74":              74,
	"OP_PUSH75":              75,
	"OP_PUSHDATA":            76,
	"OP_PUSHDATA2":           77,
	"OP_PUSHDATA4":           78,
	"OP_1NEGATE":             79,
	"OP_RESERVED":            80,
	"OP_TRUE":                81,
	"OP_1":                   81,
	"OP_2":                   82,
	"OP_3":                   83,
	"OP_4":                   84,
	"OP_5":                   85,
	"OP_6":                   86,
	"OP_7":                   87,
	"OP_8":                   88,
	"OP_9":                   89,
	"OP_10":                  90,
	"OP_11":                  91,
	"OP_12":                  92,
	"OP_13":                  93,
	"OP_14":                  94,
	"OP_15":                  95,
	"OP_16":                  96,
	"OP_NOP":                 97,
	"OP_VER":                 98,
	"OP_IF":                  99,
	"OP_NOTIF":               100,
	"OP_VERIF":               101,
	"OP_VERNOTIF":            102,
	"OP_ELSE":                103,
	"OP_ENDIF":               104,
	"OP_VERIFY":              105,
	"OP_RETURN":              106,
	"OP_TOALTSTACK":          107,
	"OP_FROMALTSTACK":        108,
	"OP_2DROP":               109,
	"OP_2DUP":                110,
	"OP_3DUP":                111,
	"OP_2OVER":               112,
	"OP_2ROT":                113,
	"OP_2SWAP":               114,
	"OP_IFDUP":               115,
	"OP_DEPTH":               116,
	"OP_DROP":                117,
	"OP_DUP":                 118,
	"OP_NIP":                 119,
	"OP_OVER":                120,
	"OP_PICK":                121,
	"OP_ROLL":                122,
	"OP_ROT":                 123,
	"OP_SWAP":                124,
	"OP_TUCK":                125,
	"OP_CAT":                 126,
	"OP_SUBSTR":              127,
	"OP_LEFT":                128,
	"OP_RIGHT":               129,
	"OP_SIZE":                130,
	"OP_INVERT":              131,
	"OP_AND":                 132,
	"OP_OR":                  133,
	"OP_XOR":                 134,
	"OP_EQUAL":               135,
	"OP_EQUALVERIFY":         136,
	"OP_RESERVED1":           137,
	"OP_RESERVED2":           138,
	"OP_1ADD":                139,
	"OP_1SUB":                140,
	"OP_2MUL":                141,
	"OP_2DIV":                142,
	"OP_NEGATE":              143,
	"OP_ABS":                 144,
	"OP_NOT":                 145,
	"OP_0NOTEQUAL":           146,
	"OP_ADD":                 147,
	"OP_SUB":                 148,
	"OP_MUL":                 149,
	"OP_DIV":                 150,
	"OP_MOD":                 151,
	"OP_LSHIFT":              152,
	"OP_RSHIFT":              153,
	"OP_BOOLAND":             154,
	"OP_BOOLOR":              155,
	"OP_NUMEQUAL":            156,
	"OP_NUMEQUALVERIFY":      157,
	"OP_NUMNOTEQUAL":         158,
	"OP_LESSTHAN":            159,
	"OP_GREATERTHAN":         160,
	"OP_LESSTHANOREQUAL":     161,
	"OP_GREATERTHANOREQUAL":  162,
	"OP_MIN":                 163,
	"OP_MAX":                 164,
	"OP_WITHIN":              165,
	"OP_RIPEMD160":           166,
	"OP_SHA1":                167,
	"OP_SHA256":              168,
	"OP_HASH160":             169,
	"OP_HASH256":             170,
	"OP_CODESEPARATOR":       171,
	"OP_CHECKSIG":            172,
	"OP_CHECKSIGVERIFY":      173,
	"OP_CHECKMULTISIG":       174,
	"OP_CHECKMULTISIGVERIFY": 175,
	"OP_NOP1":                176,
	"OP_NOP2":                177,
	"OP_NOP3":                178,
	"OP_NOP4":                179,
	"OP_NOP5":                180,
	"OP_NOP6":                181,
	"OP_NOP7":                182,
	"OP_NOP8":                183,
	"OP_NOP9":                184,
	"OP_NOP10":               185,
}

func (x Operation_Code) String() string {
	return proto.EnumName(Operation_Code_name, int32(x))
}
func (Operation_Code) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

type InventoryVector_VectorType int32

const (
	InventoryVector_ERROR          InventoryVector_VectorType = 0
	InventoryVector_TRANSACTION    InventoryVector_VectorType = 1
	InventoryVector_BLOCK          InventoryVector_VectorType = 2
	InventoryVector_FILTERED_BLOCK InventoryVector_VectorType = 3
)

var InventoryVector_VectorType_name = map[int32]string{
	0: "ERROR",
	1: "TRANSACTION",
	2: "BLOCK",
	3: "FILTERED_BLOCK",
}
var InventoryVector_VectorType_value = map[string]int32{
	"ERROR":          0,
	"TRANSACTION":    1,
	"BLOCK":          2,
	"FILTERED_BLOCK": 3,
}

func (x InventoryVector_VectorType) String() string {
	return proto.EnumName(InventoryVector_VectorType_name, int32(x))
}
func (InventoryVector_VectorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10, 0}
}

type Reject_Reason int32

const (
	Reject_UNDEFINED      Reject_Reason = 0
	Reject_MALFORMED      Reject_Reason = 1
	Reject_INVALID        Reject_Reason = 2
	Reject_OBSOLETE       Reject_Reason = 3
	Reject_DUPLICATE      Reject_Reason = 4
	Reject_NONSTANDARD    Reject_Reason = 5
	Reject_DUST           Reject_Reason = 6
	Reject_INSUFFIENT_FEE Reject_Reason = 7
	Reject_CHECKPOINT     Reject_Reason = 8
)

var Reject_Reason_name = map[int32]string{
	0: "UNDEFINED",
	1: "MALFORMED",
	2: "INVALID",
	3: "OBSOLETE",
	4: "DUPLICATE",
	5: "NONSTANDARD",
	6: "DUST",
	7: "INSUFFIENT_FEE",
	8: "CHECKPOINT",
}
var Reject_Reason_value = map[string]int32{
	"UNDEFINED":      0,
	"MALFORMED":      1,
	"INVALID":        2,
	"OBSOLETE":       3,
	"DUPLICATE":      4,
	"NONSTANDARD":    5,
	"DUST":           6,
	"INSUFFIENT_FEE": 7,
	"CHECKPOINT":     8,
}

func (x Reject_Reason) String() string {
	return proto.EnumName(Reject_Reason_name, int32(x))
}
func (Reject_Reason) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{24, 0} }

type Message struct {
	Magic    uint32          `protobuf:"fixed32,1,opt,name=magic" json:"magic,omitempty"`
	Command  Message_Command `protobuf:"varint,2,opt,name=command,enum=btc.Message_Command" json:"command,omitempty"`
	Length   uint32          `protobuf:"varint,3,opt,name=length" json:"length,omitempty"`
	Checksum uint32          `protobuf:"varint,4,opt,name=checksum" json:"checksum,omitempty"`
	Payload  []byte          `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Message) GetMagic() uint32 {
	if m != nil {
		return m.Magic
	}
	return 0
}

func (m *Message) GetCommand() Message_Command {
	if m != nil {
		return m.Command
	}
	return Message_VERSION
}

func (m *Message) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *Message) GetChecksum() uint32 {
	if m != nil {
		return m.Checksum
	}
	return 0
}

func (m *Message) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type Block struct {
	// uint32 length
	NVersion       uint32    `protobuf:"varint,1,opt,name=n_version,json=nVersion" json:"n_version,omitempty"`
	HashPrev       []byte    `protobuf:"bytes,2,opt,name=hash_prev,json=hashPrev,proto3" json:"hash_prev,omitempty"`
	HashMerkleRoot []byte    `protobuf:"bytes,3,opt,name=hash_merkle_root,json=hashMerkleRoot,proto3" json:"hash_merkle_root,omitempty"`
	NTime          uint32    `protobuf:"varint,4,opt,name=n_time,json=nTime" json:"n_time,omitempty"`
	NBits          uint32    `protobuf:"varint,5,opt,name=n_bits,json=nBits" json:"n_bits,omitempty"`
	NNonce         uint32    `protobuf:"varint,6,opt,name=n_nonce,json=nNonce" json:"n_nonce,omitempty"`
	Coinbase       *Coinbase `protobuf:"bytes,7,opt,name=coinbase" json:"coinbase,omitempty"`
	// intXX transaction_count
	Transactions []*Transaction `protobuf:"bytes,8,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Block) GetNVersion() uint32 {
	if m != nil {
		return m.NVersion
	}
	return 0
}

func (m *Block) GetHashPrev() []byte {
	if m != nil {
		return m.HashPrev
	}
	return nil
}

func (m *Block) GetHashMerkleRoot() []byte {
	if m != nil {
		return m.HashMerkleRoot
	}
	return nil
}

func (m *Block) GetNTime() uint32 {
	if m != nil {
		return m.NTime
	}
	return 0
}

func (m *Block) GetNBits() uint32 {
	if m != nil {
		return m.NBits
	}
	return 0
}

func (m *Block) GetNNonce() uint32 {
	if m != nil {
		return m.NNonce
	}
	return 0
}

func (m *Block) GetCoinbase() *Coinbase {
	if m != nil {
		return m.Coinbase
	}
	return nil
}

func (m *Block) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type Coinbase struct {
	Version uint32         `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Input   *CoinbaseInput `protobuf:"bytes,2,opt,name=input" json:"input,omitempty"`
	Outputs []*TxOutput    `protobuf:"bytes,3,rep,name=outputs" json:"outputs,omitempty"`
}

func (m *Coinbase) Reset()                    { *m = Coinbase{} }
func (m *Coinbase) String() string            { return proto.CompactTextString(m) }
func (*Coinbase) ProtoMessage()               {}
func (*Coinbase) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Coinbase) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Coinbase) GetInput() *CoinbaseInput {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *Coinbase) GetOutputs() []*TxOutput {
	if m != nil {
		return m.Outputs
	}
	return nil
}

type CoinbaseInput struct {
	BlockHeight uint32 `protobuf:"varint,1,opt,name=block_height,json=blockHeight" json:"block_height,omitempty"`
	MinerData   []byte `protobuf:"bytes,2,opt,name=miner_data,json=minerData,proto3" json:"miner_data,omitempty"`
	Sequence    int32  `protobuf:"zigzag32,3,opt,name=sequence" json:"sequence,omitempty"`
}

func (m *CoinbaseInput) Reset()                    { *m = CoinbaseInput{} }
func (m *CoinbaseInput) String() string            { return proto.CompactTextString(m) }
func (*CoinbaseInput) ProtoMessage()               {}
func (*CoinbaseInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CoinbaseInput) GetBlockHeight() uint32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *CoinbaseInput) GetMinerData() []byte {
	if m != nil {
		return m.MinerData
	}
	return nil
}

func (m *CoinbaseInput) GetSequence() int32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

type Transaction struct {
	Version uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	// intXX transaction_count
	Inputs []*TxInput `protobuf:"bytes,2,rep,name=inputs" json:"inputs,omitempty"`
	// intXX transaction_count
	Outputs  []*TxOutput `protobuf:"bytes,3,rep,name=outputs" json:"outputs,omitempty"`
	LockTime uint32      `protobuf:"varint,4,opt,name=lock_time,json=lockTime" json:"lock_time,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Transaction) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Transaction) GetInputs() []*TxInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *Transaction) GetOutputs() []*TxOutput {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *Transaction) GetLockTime() uint32 {
	if m != nil {
		return m.LockTime
	}
	return 0
}

type Operation struct {
	Opcode Operation_Code `protobuf:"varint,1,opt,name=opcode,enum=btc.Operation_Code" json:"opcode,omitempty"`
	Data   []byte         `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Operation) Reset()                    { *m = Operation{} }
func (m *Operation) String() string            { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()               {}
func (*Operation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Operation) GetOpcode() Operation_Code {
	if m != nil {
		return m.Opcode
	}
	return Operation_OP_FALSE
}

func (m *Operation) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Script struct {
	Operations []*Operation `protobuf:"bytes,1,rep,name=operations" json:"operations,omitempty"`
}

func (m *Script) Reset()                    { *m = Script{} }
func (m *Script) String() string            { return proto.CompactTextString(m) }
func (*Script) ProtoMessage()               {}
func (*Script) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Script) GetOperations() []*Operation {
	if m != nil {
		return m.Operations
	}
	return nil
}

type TxInput struct {
	OutpointHash  []byte `protobuf:"bytes,1,opt,name=outpoint_hash,json=outpointHash,proto3" json:"outpoint_hash,omitempty"`
	OutpointIndex uint32 `protobuf:"varint,2,opt,name=outpoint_index,json=outpointIndex" json:"outpoint_index,omitempty"`
	// varint script_length
	SigScript *Script `protobuf:"bytes,3,opt,name=sig_script,json=sigScript" json:"sig_script,omitempty"`
	Sequence  uint32  `protobuf:"varint,4,opt,name=sequence" json:"sequence,omitempty"`
}

func (m *TxInput) Reset()                    { *m = TxInput{} }
func (m *TxInput) String() string            { return proto.CompactTextString(m) }
func (*TxInput) ProtoMessage()               {}
func (*TxInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *TxInput) GetOutpointHash() []byte {
	if m != nil {
		return m.OutpointHash
	}
	return nil
}

func (m *TxInput) GetOutpointIndex() uint32 {
	if m != nil {
		return m.OutpointIndex
	}
	return 0
}

func (m *TxInput) GetSigScript() *Script {
	if m != nil {
		return m.SigScript
	}
	return nil
}

func (m *TxInput) GetSequence() uint32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

type TxOutput struct {
	Value uint32 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	// varint pk_script_length
	PkScript *Script `protobuf:"bytes,2,opt,name=pk_script,json=pkScript" json:"pk_script,omitempty"`
}

func (m *TxOutput) Reset()                    { *m = TxOutput{} }
func (m *TxOutput) String() string            { return proto.CompactTextString(m) }
func (*TxOutput) ProtoMessage()               {}
func (*TxOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *TxOutput) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *TxOutput) GetPkScript() *Script {
	if m != nil {
		return m.PkScript
	}
	return nil
}

type NetAddress struct {
	Timestamp uint32 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Services  uint64 `protobuf:"varint,2,opt,name=services" json:"services,omitempty"`
	IpAddress []byte `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Port      uint32 `protobuf:"varint,4,opt,name=port" json:"port,omitempty"`
}

func (m *NetAddress) Reset()                    { *m = NetAddress{} }
func (m *NetAddress) String() string            { return proto.CompactTextString(m) }
func (*NetAddress) ProtoMessage()               {}
func (*NetAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *NetAddress) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *NetAddress) GetServices() uint64 {
	if m != nil {
		return m.Services
	}
	return 0
}

func (m *NetAddress) GetIpAddress() []byte {
	if m != nil {
		return m.IpAddress
	}
	return nil
}

func (m *NetAddress) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type InventoryVector struct {
	Type          InventoryVector_VectorType `protobuf:"varint,1,opt,name=type,enum=btc.InventoryVector_VectorType" json:"type,omitempty"`
	HashReference []byte                     `protobuf:"bytes,2,opt,name=hash_reference,json=hashReference,proto3" json:"hash_reference,omitempty"`
}

func (m *InventoryVector) Reset()                    { *m = InventoryVector{} }
func (m *InventoryVector) String() string            { return proto.CompactTextString(m) }
func (*InventoryVector) ProtoMessage()               {}
func (*InventoryVector) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *InventoryVector) GetType() InventoryVector_VectorType {
	if m != nil {
		return m.Type
	}
	return InventoryVector_ERROR
}

func (m *InventoryVector) GetHashReference() []byte {
	if m != nil {
		return m.HashReference
	}
	return nil
}

type Version struct {
	Version     uint32      `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Services    uint64      `protobuf:"varint,2,opt,name=services" json:"services,omitempty"`
	Timestamp   uint64      `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	AddrTo      *NetAddress `protobuf:"bytes,4,opt,name=addr_to,json=addrTo" json:"addr_to,omitempty"`
	AddrFrom    *NetAddress `protobuf:"bytes,5,opt,name=addr_from,json=addrFrom" json:"addr_from,omitempty"`
	Nonce       uint64      `protobuf:"varint,6,opt,name=nonce" json:"nonce,omitempty"`
	UserAgent   string      `protobuf:"bytes,7,opt,name=user_agent,json=userAgent" json:"user_agent,omitempty"`
	StartHeight uint32      `protobuf:"varint,8,opt,name=start_height,json=startHeight" json:"start_height,omitempty"`
	Relay       bool        `protobuf:"varint,9,opt,name=relay" json:"relay,omitempty"`
}

func (m *Version) Reset()                    { *m = Version{} }
func (m *Version) String() string            { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()               {}
func (*Version) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Version) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Version) GetServices() uint64 {
	if m != nil {
		return m.Services
	}
	return 0
}

func (m *Version) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Version) GetAddrTo() *NetAddress {
	if m != nil {
		return m.AddrTo
	}
	return nil
}

func (m *Version) GetAddrFrom() *NetAddress {
	if m != nil {
		return m.AddrFrom
	}
	return nil
}

func (m *Version) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Version) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *Version) GetStartHeight() uint32 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *Version) GetRelay() bool {
	if m != nil {
		return m.Relay
	}
	return false
}

type Verack struct {
}

func (m *Verack) Reset()                    { *m = Verack{} }
func (m *Verack) String() string            { return proto.CompactTextString(m) }
func (*Verack) ProtoMessage()               {}
func (*Verack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type Addr struct {
	AddressList []*NetAddress `protobuf:"bytes,1,rep,name=address_list,json=addressList" json:"address_list,omitempty"`
}

func (m *Addr) Reset()                    { *m = Addr{} }
func (m *Addr) String() string            { return proto.CompactTextString(m) }
func (*Addr) ProtoMessage()               {}
func (*Addr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Addr) GetAddressList() []*NetAddress {
	if m != nil {
		return m.AddressList
	}
	return nil
}

type Inv struct {
	Vectors []*InventoryVector `protobuf:"bytes,1,rep,name=vectors" json:"vectors,omitempty"`
}

func (m *Inv) Reset()                    { *m = Inv{} }
func (m *Inv) String() string            { return proto.CompactTextString(m) }
func (*Inv) ProtoMessage()               {}
func (*Inv) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Inv) GetVectors() []*InventoryVector {
	if m != nil {
		return m.Vectors
	}
	return nil
}

type GetData struct {
	Vectors []*InventoryVector `protobuf:"bytes,1,rep,name=vectors" json:"vectors,omitempty"`
}

func (m *GetData) Reset()                    { *m = GetData{} }
func (m *GetData) String() string            { return proto.CompactTextString(m) }
func (*GetData) ProtoMessage()               {}
func (*GetData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GetData) GetVectors() []*InventoryVector {
	if m != nil {
		return m.Vectors
	}
	return nil
}

type NotFound struct {
	Vectors []*InventoryVector `protobuf:"bytes,1,rep,name=vectors" json:"vectors,omitempty"`
}

func (m *NotFound) Reset()                    { *m = NotFound{} }
func (m *NotFound) String() string            { return proto.CompactTextString(m) }
func (*NotFound) ProtoMessage()               {}
func (*NotFound) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *NotFound) GetVectors() []*InventoryVector {
	if m != nil {
		return m.Vectors
	}
	return nil
}

type GetBlocks struct {
	Version            uint32   `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	BlockLocatorHashes [][]byte `protobuf:"bytes,2,rep,name=block_locator_hashes,json=blockLocatorHashes,proto3" json:"block_locator_hashes,omitempty"`
	HashStop           []byte   `protobuf:"bytes,3,opt,name=hash_stop,json=hashStop,proto3" json:"hash_stop,omitempty"`
}

func (m *GetBlocks) Reset()                    { *m = GetBlocks{} }
func (m *GetBlocks) String() string            { return proto.CompactTextString(m) }
func (*GetBlocks) ProtoMessage()               {}
func (*GetBlocks) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetBlocks) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *GetBlocks) GetBlockLocatorHashes() [][]byte {
	if m != nil {
		return m.BlockLocatorHashes
	}
	return nil
}

func (m *GetBlocks) GetHashStop() []byte {
	if m != nil {
		return m.HashStop
	}
	return nil
}

type GetHeaders struct {
	Version            uint32   `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	BlockLocatorHashes [][]byte `protobuf:"bytes,2,rep,name=block_locator_hashes,json=blockLocatorHashes,proto3" json:"block_locator_hashes,omitempty"`
	HashStop           []byte   `protobuf:"bytes,3,opt,name=hash_stop,json=hashStop,proto3" json:"hash_stop,omitempty"`
}

func (m *GetHeaders) Reset()                    { *m = GetHeaders{} }
func (m *GetHeaders) String() string            { return proto.CompactTextString(m) }
func (*GetHeaders) ProtoMessage()               {}
func (*GetHeaders) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *GetHeaders) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *GetHeaders) GetBlockLocatorHashes() [][]byte {
	if m != nil {
		return m.BlockLocatorHashes
	}
	return nil
}

func (m *GetHeaders) GetHashStop() []byte {
	if m != nil {
		return m.HashStop
	}
	return nil
}

type GetAddr struct {
}

func (m *GetAddr) Reset()                    { *m = GetAddr{} }
func (m *GetAddr) String() string            { return proto.CompactTextString(m) }
func (*GetAddr) ProtoMessage()               {}
func (*GetAddr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type Mempool struct {
}

func (m *Mempool) Reset()                    { *m = Mempool{} }
func (m *Mempool) String() string            { return proto.CompactTextString(m) }
func (*Mempool) ProtoMessage()               {}
func (*Mempool) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type Ping struct {
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce" json:"nonce,omitempty"`
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *Ping) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type Pong struct {
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce" json:"nonce,omitempty"`
}

func (m *Pong) Reset()                    { *m = Pong{} }
func (m *Pong) String() string            { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()               {}
func (*Pong) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *Pong) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type Alert struct {
	Payload   []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Alert) Reset()                    { *m = Alert{} }
func (m *Alert) String() string            { return proto.CompactTextString(m) }
func (*Alert) ProtoMessage()               {}
func (*Alert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *Alert) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Alert) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Reject struct {
	Message string        `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Ccode   Reject_Reason `protobuf:"varint,2,opt,name=ccode,enum=btc.Reject_Reason" json:"ccode,omitempty"`
}

func (m *Reject) Reset()                    { *m = Reject{} }
func (m *Reject) String() string            { return proto.CompactTextString(m) }
func (*Reject) ProtoMessage()               {}
func (*Reject) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *Reject) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Reject) GetCcode() Reject_Reason {
	if m != nil {
		return m.Ccode
	}
	return Reject_UNDEFINED
}

type FilterLoad struct {
	Filter                []byte `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	NumberOfHashFunctions uint32 `protobuf:"varint,2,opt,name=number_of_hash_functions,json=numberOfHashFunctions" json:"number_of_hash_functions,omitempty"`
	TweakNonce            uint32 `protobuf:"varint,3,opt,name=tweak_nonce,json=tweakNonce" json:"tweak_nonce,omitempty"`
	Flags                 uint32 `protobuf:"varint,4,opt,name=flags" json:"flags,omitempty"`
}

func (m *FilterLoad) Reset()                    { *m = FilterLoad{} }
func (m *FilterLoad) String() string            { return proto.CompactTextString(m) }
func (*FilterLoad) ProtoMessage()               {}
func (*FilterLoad) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *FilterLoad) GetFilter() []byte {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *FilterLoad) GetNumberOfHashFunctions() uint32 {
	if m != nil {
		return m.NumberOfHashFunctions
	}
	return 0
}

func (m *FilterLoad) GetTweakNonce() uint32 {
	if m != nil {
		return m.TweakNonce
	}
	return 0
}

func (m *FilterLoad) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

type FilterAdd struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *FilterAdd) Reset()                    { *m = FilterAdd{} }
func (m *FilterAdd) String() string            { return proto.CompactTextString(m) }
func (*FilterAdd) ProtoMessage()               {}
func (*FilterAdd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *FilterAdd) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type FilterClear struct {
}

func (m *FilterClear) Reset()                    { *m = FilterClear{} }
func (m *FilterClear) String() string            { return proto.CompactTextString(m) }
func (*FilterClear) ProtoMessage()               {}
func (*FilterClear) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

type MerkleBlock struct {
	Version           uint32   `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	PreviousBlock     []byte   `protobuf:"bytes,2,opt,name=previous_block,json=previousBlock,proto3" json:"previous_block,omitempty"`
	MerkleRoot        []byte   `protobuf:"bytes,3,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	Timestamp         uint32   `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	Bits              uint32   `protobuf:"varint,5,opt,name=bits" json:"bits,omitempty"`
	Nonce             uint32   `protobuf:"varint,6,opt,name=nonce" json:"nonce,omitempty"`
	TotalTransactions uint32   `protobuf:"varint,7,opt,name=total_transactions,json=totalTransactions" json:"total_transactions,omitempty"`
	Hashes            [][]byte `protobuf:"bytes,8,rep,name=hashes,proto3" json:"hashes,omitempty"`
	Flags             []byte   `protobuf:"bytes,9,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (m *MerkleBlock) Reset()                    { *m = MerkleBlock{} }
func (m *MerkleBlock) String() string            { return proto.CompactTextString(m) }
func (*MerkleBlock) ProtoMessage()               {}
func (*MerkleBlock) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *MerkleBlock) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *MerkleBlock) GetPreviousBlock() []byte {
	if m != nil {
		return m.PreviousBlock
	}
	return nil
}

func (m *MerkleBlock) GetMerkleRoot() []byte {
	if m != nil {
		return m.MerkleRoot
	}
	return nil
}

func (m *MerkleBlock) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MerkleBlock) GetBits() uint32 {
	if m != nil {
		return m.Bits
	}
	return 0
}

func (m *MerkleBlock) GetNonce() uint32 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *MerkleBlock) GetTotalTransactions() uint32 {
	if m != nil {
		return m.TotalTransactions
	}
	return 0
}

func (m *MerkleBlock) GetHashes() [][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

func (m *MerkleBlock) GetFlags() []byte {
	if m != nil {
		return m.Flags
	}
	return nil
}

type NodeState struct {
	GenesisBlock []byte `protobuf:"bytes,1,opt,name=genesis_block,json=genesisBlock,proto3" json:"genesis_block,omitempty"`
	CurrentBlock []byte `protobuf:"bytes,2,opt,name=current_block,json=currentBlock,proto3" json:"current_block,omitempty"`
	BlockHeight  uint32 `protobuf:"varint,3,opt,name=block_height,json=blockHeight" json:"block_height,omitempty"`
}

func (m *NodeState) Reset()                    { *m = NodeState{} }
func (m *NodeState) String() string            { return proto.CompactTextString(m) }
func (*NodeState) ProtoMessage()               {}
func (*NodeState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *NodeState) GetGenesisBlock() []byte {
	if m != nil {
		return m.GenesisBlock
	}
	return nil
}

func (m *NodeState) GetCurrentBlock() []byte {
	if m != nil {
		return m.CurrentBlock
	}
	return nil
}

func (m *NodeState) GetBlockHeight() uint32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*Message)(nil), "btc.Message")
	proto.RegisterType((*Block)(nil), "btc.Block")
	proto.RegisterType((*Coinbase)(nil), "btc.Coinbase")
	proto.RegisterType((*CoinbaseInput)(nil), "btc.CoinbaseInput")
	proto.RegisterType((*Transaction)(nil), "btc.Transaction")
	proto.RegisterType((*Operation)(nil), "btc.Operation")
	proto.RegisterType((*Script)(nil), "btc.Script")
	proto.RegisterType((*TxInput)(nil), "btc.TxInput")
	proto.RegisterType((*TxOutput)(nil), "btc.TxOutput")
	proto.RegisterType((*NetAddress)(nil), "btc.NetAddress")
	proto.RegisterType((*InventoryVector)(nil), "btc.InventoryVector")
	proto.RegisterType((*Version)(nil), "btc.Version")
	proto.RegisterType((*Verack)(nil), "btc.Verack")
	proto.RegisterType((*Addr)(nil), "btc.Addr")
	proto.RegisterType((*Inv)(nil), "btc.Inv")
	proto.RegisterType((*GetData)(nil), "btc.GetData")
	proto.RegisterType((*NotFound)(nil), "btc.NotFound")
	proto.RegisterType((*GetBlocks)(nil), "btc.GetBlocks")
	proto.RegisterType((*GetHeaders)(nil), "btc.GetHeaders")
	proto.RegisterType((*GetAddr)(nil), "btc.GetAddr")
	proto.RegisterType((*Mempool)(nil), "btc.Mempool")
	proto.RegisterType((*Ping)(nil), "btc.Ping")
	proto.RegisterType((*Pong)(nil), "btc.Pong")
	proto.RegisterType((*Alert)(nil), "btc.Alert")
	proto.RegisterType((*Reject)(nil), "btc.Reject")
	proto.RegisterType((*FilterLoad)(nil), "btc.FilterLoad")
	proto.RegisterType((*FilterAdd)(nil), "btc.FilterAdd")
	proto.RegisterType((*FilterClear)(nil), "btc.FilterClear")
	proto.RegisterType((*MerkleBlock)(nil), "btc.MerkleBlock")
	proto.RegisterType((*NodeState)(nil), "btc.NodeState")
	proto.RegisterEnum("btc.Message_Command", Message_Command_name, Message_Command_value)
	proto.RegisterEnum("btc.Operation_Code", Operation_Code_name, Operation_Code_value)
	proto.RegisterEnum("btc.InventoryVector_VectorType", InventoryVector_VectorType_name, InventoryVector_VectorType_value)
	proto.RegisterEnum("btc.Reject_Reason", Reject_Reason_name, Reject_Reason_value)
}

func init() { proto.RegisterFile("btc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2817 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x99, 0xe7, 0x7e, 0xe3, 0xc6,
	0xb5, 0xc0, 0x17, 0x2a, 0x2c, 0x43, 0x52, 0x7b, 0x76, 0x56, 0xbb, 0xe6, 0x5d, 0xdb, 0x77, 0x65,
	0xda, 0xbe, 0x96, 0x9b, 0x2e, 0xab, 0x8a, 0x6f, 0x71, 0x20, 0x02, 0x14, 0xe1, 0x25, 0x01, 0x7a,
	0x08, 0xca, 0x6b, 0xa7, 0x30, 0x10, 0x05, 0x49, 0xb4, 0x48, 0x80, 0x06, 0x40, 0x79, 0x37, 0xbd,
	0xf7, 0xc4, 0x49, 0xec, 0xf4, 0xd8, 0x29, 0x4e, 0xef, 0xd5, 0x49, 0xbe, 0xf8, 0x51, 0xf2, 0x0a,
	0x79, 0x85, 0xfc, 0x66, 0x30, 0x43, 0x8d, 0x76, 0x6d, 0xff, 0xe2, 0x2f, 0xf9, 0xc4, 0xf9, 0x9f,
	0x73, 0x66, 0xe6, 0xcc, 0x99, 0x82, 0x99, 0x43, 0x94, 0xde, 0x8b, 0x06, 0x6b, 0x93, 0xc0, 0x8f,
	0x7c, 0x3c, 0xbf, 0x17, 0x0d, 0x0a, 0xaf, 0xcf, 0xa3, 0x64, 0xdb, 0x0d, 0x43, 0xe7, 0xd0, 0xc5,
	0xcb, 0x68, 0x71, 0xec, 0x1c, 0x0e, 0x07, 0x79, 0x65, 0x45, 0x59, 0x4d, 0x92, 0x18, 0xf0, 0x1a,
	0x4a, 0x0e, 0xfc, 0xf1, 0xd8, 0xf1, 0xf6, 0xf3, 0x73, 0x2b, 0xca, 0xea, 0x52, 0x79, 0x79, 0x8d,
	0xb6, 0xc1, 0x2b, 0xad, 0xd5, 0x63, 0x1d, 0x11, 0x46, 0xf8, 0x32, 0x4a, 0x8c, 0x5c, 0xef, 0x30,
	0x3a, 0xca, 0xcf, 0xaf, 0x28, 0xab, 0x39, 0xc2, 0x09, 0x5f, 0x41, 0xa9, 0xc1, 0x91, 0x3b, 0x38,
	0x0e, 0xa7, 0xe3, 0xfc, 0x02, 0xd3, 0xcc, 0x18, 0xe7, 0x51, 0x72, 0xe2, 0xdc, 0x1c, 0xf9, 0xce,
	0x7e, 0x7e, 0x71, 0x45, 0x59, 0xcd, 0x12, 0x81, 0x85, 0x57, 0xe6, 0x50, 0x92, 0x77, 0x81, 0x33,
	0x28, 0xb9, 0xab, 0x93, 0xae, 0x61, 0x99, 0x70, 0x0e, 0x23, 0x94, 0xd8, 0xd5, 0x89, 0x5a, 0xbf,
	0x06, 0x0a, 0x4e, 0xa1, 0x05, 0x55, 0xd3, 0x08, 0xcc, 0xe1, 0x24, 0x9a, 0x37, 0xcc, 0x5d, 0x98,
	0xc7, 0x59, 0x94, 0xda, 0xd1, 0xed, 0xbe, 0xa6, 0xda, 0x2a, 0x2c, 0xe0, 0x1c, 0x4a, 0x9b, 0x96,
	0xdd, 0x6f, 0x58, 0x3d, 0x53, 0x83, 0x45, 0xbc, 0x84, 0x10, 0x55, 0x6e, 0xb7, 0xac, 0xfa, 0xb5,
	0x2e, 0x24, 0xf0, 0x79, 0x94, 0xa1, 0xdc, 0xd4, 0x55, 0x4d, 0x27, 0x5d, 0x48, 0xe2, 0x04, 0x9a,
	0xb3, 0xaf, 0x43, 0x0a, 0xa7, 0xd1, 0x22, 0x33, 0x82, 0x34, 0xed, 0x5c, 0xe8, 0x91, 0x68, 0x9d,
	0x75, 0x9a, 0xa1, 0xaa, 0xb6, 0xde, 0xee, 0x58, 0x56, 0x0b, 0xb2, 0xd4, 0x97, 0x8e, 0x61, 0xee,
	0x40, 0x8e, 0x95, 0x2c, 0x73, 0x07, 0x96, 0xa8, 0xaf, 0x44, 0x7f, 0x42, 0xaf, 0xdb, 0x70, 0x9e,
	0x36, 0xa9, 0xb6, 0x74, 0x62, 0x03, 0xd0, 0x6e, 0x1b, 0x46, 0xcb, 0xd6, 0x49, 0xbf, 0x65, 0xa9,
	0x1a, 0x5c, 0xa0, 0x7e, 0x71, 0x81, 0xaa, 0x69, 0x80, 0x31, 0xa0, 0x2c, 0xe7, 0x7a, 0x4b, 0x57,
	0x09, 0x5c, 0xa4, 0x92, 0xb6, 0x4e, 0xae, 0xb5, 0xf4, 0xd8, 0x79, 0x58, 0x2e, 0xbc, 0x38, 0x87,
	0x16, 0xb7, 0x47, 0xfe, 0xe0, 0x18, 0xdf, 0x89, 0xd2, 0x5e, 0xff, 0xc4, 0x0d, 0xc2, 0xa1, 0xef,
	0xb1, 0x29, 0xcc, 0x91, 0x94, 0xb7, 0x1b, 0x33, 0x55, 0x1e, 0x39, 0xe1, 0x51, 0x7f, 0x12, 0xb8,
	0x27, 0x6c, 0x1e, 0xb3, 0x24, 0x45, 0x05, 0x9d, 0xc0, 0x3d, 0xc1, 0xab, 0x08, 0x98, 0x72, 0xec,
	0x06, 0xc7, 0x23, 0xb7, 0x1f, 0xf8, 0x7e, 0xc4, 0x26, 0x2f, 0x4b, 0x96, 0xa8, 0xbc, 0xcd, 0xc4,
	0xc4, 0xf7, 0x23, 0x7c, 0x09, 0x25, 0xbc, 0x7e, 0x34, 0x1c, 0xbb, 0x7c, 0x0a, 0x17, 0x3d, 0x7b,
	0x38, 0x76, 0x63, 0xf1, 0xde, 0x30, 0x0a, 0xd9, 0xf4, 0x51, 0xf1, 0xf6, 0x30, 0x0a, 0xf1, 0x1d,
	0x28, 0xe9, 0xf5, 0x3d, 0xdf, 0x1b, 0xb8, 0xf9, 0x44, 0xbc, 0x16, 0x3c, 0x93, 0x12, 0x7e, 0x10,
	0xa5, 0x06, 0xfe, 0xd0, 0xdb, 0x73, 0x42, 0x37, 0x9f, 0x5c, 0x51, 0x56, 0x33, 0xe5, 0x1c, 0x5b,
	0x54, 0x75, 0x2e, 0x24, 0x33, 0x35, 0xae, 0xa2, 0x6c, 0x14, 0x38, 0x5e, 0xe8, 0x0c, 0xa2, 0xa1,
	0xef, 0x85, 0xf9, 0xd4, 0xca, 0xfc, 0x6a, 0xa6, 0x0c, 0xcc, 0xdc, 0x3e, 0x55, 0x90, 0x33, 0x56,
	0x85, 0xe7, 0x51, 0x4a, 0xb4, 0x45, 0x17, 0xd7, 0xd9, 0xa8, 0x08, 0xc4, 0xab, 0x68, 0x71, 0xe8,
	0x4d, 0xa6, 0x11, 0x0b, 0x48, 0xa6, 0x8c, 0xcf, 0xf8, 0x60, 0x50, 0x0d, 0x89, 0x0d, 0xf0, 0x03,
	0x28, 0xe9, 0x4f, 0xa3, 0xc9, 0x34, 0x0a, 0xf3, 0xf3, 0xcc, 0x81, 0xd8, 0x5f, 0xfb, 0x86, 0xc5,
	0xa4, 0x44, 0x68, 0x0b, 0x63, 0x94, 0x3b, 0xd3, 0x00, 0xbe, 0x07, 0x65, 0xf7, 0xe8, 0xf4, 0xf4,
	0x8f, 0xdc, 0xe1, 0xe1, 0x51, 0xc4, 0x5d, 0xc8, 0x30, 0x59, 0x93, 0x89, 0xf0, 0xdd, 0x08, 0x8d,
	0x87, 0x9e, 0x1b, 0xf4, 0xf7, 0x9d, 0xc8, 0xe1, 0x93, 0x93, 0x66, 0x12, 0xcd, 0x89, 0x1c, 0xba,
	0x71, 0x42, 0xf7, 0xb9, 0xa9, 0x4b, 0xc3, 0x48, 0x67, 0xe5, 0x02, 0x99, 0x71, 0xe1, 0x45, 0x05,
	0x65, 0xa4, 0x28, 0xbc, 0xc5, 0x58, 0xef, 0x43, 0x09, 0x36, 0x94, 0x30, 0x3f, 0xc7, 0x06, 0x90,
	0xe5, 0x03, 0x88, 0x87, 0xc9, 0x75, 0xff, 0xf2, 0x38, 0xe9, 0x7a, 0x62, 0xa3, 0x92, 0xd6, 0x42,
	0x8a, 0x0a, 0xe8, 0x72, 0x28, 0xbc, 0x7e, 0x19, 0xa5, 0xad, 0x89, 0x1b, 0x38, 0xcc, 0xa7, 0x87,
	0x51, 0xc2, 0x9f, 0x0c, 0xfc, 0x7d, 0x97, 0xb9, 0xb4, 0x54, 0xbe, 0xc8, 0x9a, 0x9c, 0xe9, 0xd7,
	0xea, 0xfe, 0xbe, 0x4b, 0xb8, 0x09, 0xc6, 0x68, 0x41, 0x8a, 0x02, 0x2b, 0x17, 0xfe, 0x71, 0x09,
	0x2d, 0x50, 0x23, 0xba, 0xed, 0xac, 0x4e, 0xbf, 0xa1, 0xb6, 0xba, 0x3a, 0x9c, 0xa3, 0xfb, 0xcb,
	0xea, 0xf4, 0x8b, 0x70, 0x8e, 0xcb, 0x3b, 0xbd, 0x6e, 0xb3, 0x04, 0x8a, 0x44, 0x65, 0x98, 0x93,
	0xa8, 0x12, 0x1f, 0x0b, 0x9c, 0xaa, 0xb0, 0x20, 0x51, 0x0d, 0x16, 0x25, 0x5a, 0x87, 0x84, 0x44,
	0x1b, 0x90, 0x94, 0x68, 0x13, 0x52, 0x12, 0x6d, 0x41, 0x9a, 0x1e, 0x2e, 0xa2, 0xf7, 0x22, 0x20,
	0x19, 0x4b, 0x90, 0x91, 0xb1, 0x0c, 0x59, 0x19, 0x2b, 0x90, 0x93, 0xb1, 0x0a, 0x4b, 0x32, 0xd6,
	0xe0, 0xbc, 0x8c, 0xeb, 0x00, 0x32, 0x6e, 0xc0, 0x05, 0x19, 0x37, 0x01, 0xcb, 0xb8, 0x05, 0x17,
	0x25, 0x2c, 0x17, 0x61, 0x59, 0xc6, 0x12, 0x5c, 0x92, 0xb1, 0x0c, 0x97, 0x65, 0xac, 0xc0, 0x1d,
	0x32, 0x56, 0x21, 0x2f, 0x63, 0x0d, 0xfe, 0x43, 0xc6, 0x75, 0xb8, 0x22, 0xe3, 0x06, 0xdc, 0x29,
	0xe3, 0x26, 0xdc, 0x25, 0xe3, 0x16, 0xdc, 0x2d, 0x61, 0xa5, 0x08, 0xff, 0x29, 0x63, 0x09, 0xae,
	0xca, 0x58, 0x86, 0x15, 0x19, 0x2b, 0x70, 0x8f, 0x8c, 0x55, 0x28, 0xc8, 0x58, 0x83, 0x7b, 0x65,
	0x5c, 0x87, 0xfb, 0x64, 0xdc, 0x80, 0xfb, 0x65, 0xdc, 0x84, 0xff, 0x92, 0x71, 0x0b, 0x1e, 0x90,
	0xb0, 0x5a, 0x84, 0x55, 0x19, 0x4b, 0xf0, 0xa0, 0x8c, 0x65, 0x78, 0x48, 0xc6, 0x0a, 0x3c, 0x2c,
	0x63, 0x15, 0x1e, 0x91, 0xb1, 0x06, 0x8f, 0xca, 0xb8, 0x0e, 0x6b, 0x32, 0x6e, 0xc0, 0x7f, 0xcb,
	0xb8, 0x09, 0x45, 0x19, 0xb7, 0xa0, 0x24, 0x61, 0xad, 0x08, 0x65, 0x19, 0x4b, 0x50, 0x91, 0xb1,
	0x0c, 0x55, 0x19, 0x2b, 0x50, 0x93, 0xb1, 0x0a, 0xeb, 0x32, 0xd6, 0x60, 0x43, 0xc6, 0x75, 0xd8,
	0x94, 0x71, 0x03, 0xb6, 0x64, 0xdc, 0x84, 0xc7, 0x64, 0xdc, 0x82, 0xff, 0x91, 0x70, 0xbd, 0x08,
	0xff, 0x2b, 0x63, 0x09, 0xfe, 0x4f, 0xc6, 0x32, 0xfc, 0xbf, 0x8c, 0x15, 0x78, 0x5c, 0xc6, 0x2a,
	0xbc, 0x43, 0xc6, 0x1a, 0xa8, 0x32, 0xae, 0xc3, 0xb6, 0x8c, 0x1b, 0x50, 0x97, 0x71, 0x13, 0x34,
	0x19, 0xb7, 0x40, 0x97, 0x70, 0xa3, 0x08, 0x0d, 0x19, 0x4b, 0xb0, 0x23, 0x63, 0x19, 0x9a, 0x32,
	0x56, 0xc0, 0x90, 0xb1, 0x0a, 0x4f, 0xc8, 0x58, 0x83, 0x6b, 0xf4, 0x23, 0xcd, 0x91, 0xdd, 0x25,
	0x5a, 0xf4, 0x13, 0x2c, 0x09, 0xca, 0xd0, 0xbe, 0x45, 0x52, 0x05, 0x93, 0x7e, 0xc8, 0xad, 0x4e,
	0xbf, 0x64, 0xea, 0x3b, 0xaa, 0xad, 0x83, 0xc5, 0x1b, 0x21, 0x7a, 0x57, 0x27, 0xbb, 0xba, 0x06,
	0x1d, 0x7a, 0x65, 0xb0, 0x3a, 0x7d, 0x9b, 0xf4, 0x74, 0x78, 0x92, 0x1f, 0x64, 0xa5, 0x59, 0xa9,
	0x0c, 0x84, 0x97, 0x2a, 0xd0, 0xe5, 0xa5, 0x2a, 0xd8, 0xbc, 0x54, 0x83, 0x1e, 0x2f, 0xad, 0xc3,
	0x2e, 0x2f, 0x6d, 0xc0, 0x53, 0xbc, 0xb4, 0x09, 0xd7, 0x79, 0x69, 0x0b, 0x9e, 0xa6, 0x97, 0x0d,
	0xda, 0x72, 0x11, 0x9e, 0x11, 0xc5, 0x12, 0xbc, 0x53, 0x14, 0xcb, 0xf0, 0x2e, 0x51, 0xac, 0xc0,
	0xbb, 0x45, 0xb1, 0x0a, 0xef, 0x11, 0xc5, 0x1a, 0xf4, 0x45, 0x71, 0x1d, 0xde, 0x4b, 0x6f, 0x31,
	0x56, 0xa7, 0x6f, 0x5a, 0x1d, 0x70, 0x78, 0x79, 0x57, 0x27, 0xb0, 0xc7, 0x4d, 0x8c, 0x06, 0x0c,
	0xf8, 0xc1, 0x68, 0x5a, 0xb6, 0xd1, 0x80, 0x7d, 0x4e, 0xbb, 0x3a, 0x31, 0x1a, 0xe0, 0xf2, 0x18,
	0xec, 0xea, 0x24, 0x56, 0x1f, 0xf0, 0x18, 0xe8, 0xf4, 0x30, 0x3f, 0xe4, 0xb6, 0xba, 0xa9, 0x19,
	0x0d, 0x38, 0xe2, 0x73, 0xc0, 0x6a, 0x3e, 0x0d, 0x43, 0x8e, 0x44, 0xb7, 0x7b, 0xc4, 0x84, 0x67,
	0xf1, 0x05, 0x94, 0xa3, 0xc1, 0xb3, 0xd4, 0x96, 0xdd, 0xb5, 0xe9, 0x0d, 0xf0, 0x18, 0x5f, 0x44,
	0xe7, 0xe9, 0x97, 0x81, 0x58, 0xed, 0x99, 0x70, 0xc4, 0xdb, 0x2c, 0x6b, 0xc4, 0xea, 0xc0, 0x98,
	0x77, 0x57, 0xd6, 0x7a, 0x1d, 0xf0, 0x38, 0x54, 0x28, 0xf8, 0xc2, 0xce, 0xa2, 0xc3, 0x99, 0x08,
	0x3b, 0x62, 0xd9, 0xf0, 0x9c, 0x50, 0x75, 0x9f, 0x52, 0x3b, 0x10, 0x70, 0x32, 0x1a, 0xb4, 0x5a,
	0xc8, 0x49, 0xd3, 0x3b, 0x76, 0x13, 0x22, 0x5e, 0x8d, 0xf5, 0x35, 0xe5, 0xe1, 0xa1, 0x66, 0x27,
	0x22, 0x6c, 0x46, 0x07, 0x9e, 0xe7, 0x46, 0xac, 0xa3, 0x1b, 0x1c, 0x3a, 0x46, 0xfd, 0x1a, 0xdc,
	0xe4, 0x40, 0xac, 0x56, 0x0b, 0xde, 0xc7, 0xab, 0x50, 0x0f, 0xde, 0xcf, 0x15, 0xcc, 0x81, 0x0f,
	0x88, 0x65, 0xd3, 0xab, 0x5f, 0x83, 0x0f, 0x72, 0xab, 0xba, 0x6a, 0xc3, 0x87, 0x78, 0x84, 0xba,
	0xbd, 0xed, 0xae, 0x4d, 0xe0, 0xc3, 0x38, 0xcb, 0xec, 0x5a, 0x7a, 0xc3, 0x86, 0x8f, 0x28, 0x38,
	0xc7, 0x1c, 0x25, 0xc6, 0x4e, 0xd3, 0x86, 0x8f, 0x2a, 0x5c, 0xd9, 0x35, 0x9e, 0xd1, 0xe1, 0x63,
	0x0a, 0x5e, 0x62, 0x35, 0x0d, 0x73, 0x97, 0xde, 0x49, 0x3f, 0xae, 0xe0, 0x0c, 0x6b, 0x55, 0x35,
	0x35, 0xf8, 0x84, 0x82, 0x11, 0x9b, 0x5a, 0x8b, 0xc0, 0x27, 0x85, 0xe2, 0xba, 0x45, 0xe0, 0x53,
	0xa2, 0x49, 0xfd, 0xc9, 0x9e, 0xda, 0x82, 0x4f, 0x2b, 0xf8, 0x22, 0x5a, 0x12, 0xc8, 0x27, 0xed,
	0x33, 0x0a, 0xbe, 0xc0, 0xb6, 0x85, 0x58, 0xf4, 0x25, 0xf8, 0xec, 0xad, 0xa2, 0x32, 0x7c, 0x4e,
	0x78, 0x53, 0xa2, 0x17, 0xde, 0xcf, 0xcf, 0xa8, 0xdb, 0xdb, 0x86, 0x2f, 0x08, 0x2a, 0xb7, 0x7b,
	0x2d, 0xf8, 0xe2, 0x8c, 0x34, 0x63, 0x17, 0xbe, 0x24, 0xfc, 0xe6, 0x3b, 0xec, 0x85, 0x99, 0xdf,
	0xdb, 0x5d, 0xf8, 0xb2, 0x00, 0xd3, 0xb2, 0xe1, 0x2b, 0xa2, 0xd3, 0xa2, 0x69, 0xd9, 0xb1, 0xbf,
	0x5f, 0x9d, 0x19, 0x6b, 0x1a, 0xbc, 0x28, 0x80, 0x76, 0xf9, 0x92, 0x00, 0xda, 0xe3, 0xd7, 0x04,
	0xd0, 0x0e, 0xbf, 0x3e, 0xd3, 0x58, 0x1a, 0x7c, 0x43, 0xf4, 0xde, 0xea, 0x36, 0x8d, 0x86, 0x0d,
	0xdf, 0x14, 0x4c, 0x62, 0xfe, 0x96, 0x82, 0xcf, 0xb3, 0x03, 0x60, 0xdb, 0xb2, 0x5a, 0x34, 0x92,
	0xdf, 0x16, 0x06, 0x54, 0x60, 0x11, 0xf8, 0x8e, 0x82, 0x81, 0xed, 0x06, 0xb3, 0xd7, 0x8e, 0x7d,
	0xfa, 0xae, 0x82, 0x2f, 0xa3, 0x0b, 0x92, 0x84, 0x87, 0xf1, 0x65, 0x11, 0x5b, 0xb3, 0xd7, 0x9e,
	0x0d, 0xe0, 0x15, 0x51, 0xbd, 0xa5, 0x77, 0xbb, 0x76, 0x53, 0x35, 0xe1, 0x7b, 0xc2, 0x6c, 0x87,
	0xe8, 0xaa, 0xad, 0x13, 0x26, 0xfc, 0xbe, 0x82, 0xef, 0x40, 0x58, 0x32, 0xb3, 0x48, 0x5c, 0xff,
	0x07, 0x0a, 0xbe, 0x82, 0x2e, 0x9d, 0xb5, 0x16, 0xba, 0x1f, 0xce, 0x06, 0x6a, 0x98, 0xf0, 0xea,
	0x0c, 0xd4, 0xeb, 0xf0, 0x23, 0x31, 0x88, 0xa7, 0x0c, 0xbb, 0x69, 0x98, 0xf0, 0xe3, 0xd9, 0x74,
	0x1a, 0x1d, 0xbd, 0xad, 0x95, 0xd6, 0x8b, 0xf0, 0x93, 0xd9, 0xe2, 0x6a, 0xaa, 0x25, 0xf8, 0xa9,
	0xa8, 0xd0, 0x6d, 0xaa, 0xe5, 0xda, 0x3a, 0xfc, 0x4c, 0x84, 0xa5, 0xa9, 0xd2, 0x0b, 0x4d, 0x11,
	0x7e, 0x2e, 0x0b, 0xa8, 0xc5, 0x2f, 0x14, 0x7c, 0x09, 0x01, 0x5d, 0xd4, 0x96, 0xa6, 0x77, 0xf5,
	0x8e, 0x4a, 0x54, 0xdb, 0x22, 0xf0, 0x4b, 0x31, 0xde, 0x7a, 0x53, 0xaf, 0x5f, 0xeb, 0x1a, 0x3b,
	0xf0, 0x2b, 0x11, 0x2e, 0x21, 0xe1, 0xe1, 0xfa, 0xf5, 0xac, 0x01, 0x2a, 0x6f, 0xf7, 0x5a, 0xb6,
	0x41, 0xcd, 0x7f, 0xa3, 0xe0, 0x3b, 0xd1, 0xe5, 0x5b, 0xc5, 0xbc, 0xce, 0x6f, 0x85, 0xd3, 0xa6,
	0xd5, 0x29, 0xc1, 0xef, 0x24, 0x2a, 0xc3, 0xef, 0x25, 0xaa, 0xc0, 0x1f, 0x24, 0xaa, 0xc2, 0x1f,
	0x25, 0xaa, 0xc1, 0x9f, 0x24, 0x5a, 0x87, 0x3f, 0x4b, 0xb4, 0x01, 0xaf, 0x49, 0xb4, 0x09, 0x7f,
	0x91, 0x68, 0x0b, 0xfe, 0x2a, 0xf6, 0x12, 0xed, 0xbd, 0x08, 0x7f, 0x53, 0xae, 0xcc, 0x81, 0x52,
	0xd8, 0x44, 0x89, 0xee, 0x20, 0x18, 0x4e, 0x22, 0xbc, 0x86, 0x90, 0x2f, 0x6e, 0xca, 0x61, 0x5e,
	0x61, 0x77, 0xf2, 0xa5, 0xb3, 0x17, 0x68, 0x22, 0x59, 0x14, 0x5e, 0x56, 0x50, 0x92, 0x5f, 0xea,
	0xf1, 0xbd, 0x28, 0x47, 0xaf, 0xeb, 0xfe, 0xd0, 0x8b, 0xfa, 0xf4, 0x1d, 0xc7, 0xee, 0xdf, 0x59,
	0x92, 0x15, 0xc2, 0xa6, 0x13, 0x1e, 0xe1, 0xfb, 0xd1, 0xd2, 0xcc, 0x68, 0xe8, 0xed, 0xbb, 0x37,
	0xd8, 0xd5, 0x3b, 0x47, 0x66, 0x55, 0x0d, 0x2a, 0xc4, 0x0f, 0x21, 0x14, 0x0e, 0x0f, 0xfb, 0x21,
	0xf3, 0x8a, 0x3d, 0x43, 0x32, 0xe5, 0x0c, 0xf3, 0x23, 0x76, 0x94, 0xa4, 0xc3, 0xe1, 0x21, 0xf7,
	0x59, 0x7e, 0xb0, 0xf0, 0xa7, 0xc1, 0xec, 0xc1, 0xf2, 0x04, 0x4a, 0x89, 0xc7, 0x04, 0x5e, 0x46,
	0x8b, 0x27, 0xce, 0x68, 0xea, 0xf2, 0xa7, 0x4a, 0x0c, 0x78, 0x15, 0xa5, 0x27, 0xc7, 0xa2, 0xa3,
	0xb9, 0xdb, 0x3b, 0x4a, 0x4d, 0x8e, 0xe3, 0x52, 0xe1, 0x26, 0x42, 0xa6, 0x1b, 0xa9, 0xfb, 0xfb,
	0x81, 0x1b, 0x86, 0xf8, 0x2e, 0x94, 0xa6, 0x8f, 0x91, 0x30, 0x72, 0xc6, 0x13, 0xde, 0xe2, 0xa9,
	0x20, 0xf6, 0x29, 0x38, 0x19, 0x0e, 0xdc, 0x90, 0x35, 0xba, 0x40, 0x66, 0x4c, 0xdf, 0x5f, 0xc3,
	0x49, 0xdf, 0x89, 0xdb, 0xe1, 0x0f, 0xdf, 0xf4, 0x70, 0x22, 0x1a, 0xc6, 0x68, 0x61, 0xe2, 0x07,
	0x11, 0x1f, 0x0a, 0x2b, 0x17, 0x5e, 0x53, 0xd0, 0x79, 0xc3, 0x3b, 0x71, 0xbd, 0xc8, 0x0f, 0x6e,
	0xee, 0xba, 0x83, 0xc8, 0x0f, 0x70, 0x05, 0x2d, 0x44, 0x37, 0x27, 0xe2, 0x95, 0x73, 0x95, 0xf9,
	0x7c, 0x8b, 0xcd, 0x5a, 0xfc, 0x63, 0xdf, 0x9c, 0xb8, 0x84, 0x19, 0xd3, 0xf0, 0xb3, 0xa7, 0x77,
	0xe0, 0x1e, 0xb8, 0x01, 0x8b, 0x58, 0xfc, 0xf2, 0xc9, 0x51, 0x29, 0x11, 0xc2, 0xc2, 0x0e, 0x42,
	0xa7, 0x55, 0xe9, 0x17, 0x57, 0x27, 0xc4, 0x22, 0x70, 0x8e, 0x7e, 0x55, 0x6d, 0xa2, 0x9a, 0x5d,
	0xb5, 0x6e, 0x1b, 0x96, 0x09, 0xca, 0x69, 0xca, 0x62, 0x0e, 0x63, 0xb4, 0x14, 0xa7, 0x0f, 0x74,
	0x8d, 0xa7, 0x0b, 0xe6, 0x0b, 0xaf, 0xce, 0xa1, 0xa4, 0xc8, 0x09, 0xbc, 0xf9, 0x63, 0xf1, 0xad,
	0xa2, 0x75, 0x26, 0xce, 0xf3, 0x4c, 0x29, 0xc5, 0x79, 0x15, 0x25, 0x69, 0x20, 0xfb, 0x91, 0xcf,
	0xe2, 0x95, 0x29, 0x9f, 0x67, 0x71, 0x38, 0x9d, 0x27, 0x92, 0xa0, 0x7a, 0xdb, 0xc7, 0x8f, 0xa0,
	0x34, 0xb3, 0x3c, 0x08, 0xfc, 0x31, 0x4b, 0x1b, 0xbc, 0x81, 0x6d, 0x8a, 0x5a, 0x34, 0x02, 0x7f,
	0x4c, 0xd7, 0xca, 0x69, 0x22, 0x61, 0x81, 0xc4, 0x40, 0x67, 0x6e, 0x1a, 0xba, 0x41, 0xdf, 0x39,
	0x74, 0xbd, 0x88, 0x65, 0x12, 0xd2, 0x24, 0x4d, 0x25, 0x2a, 0x15, 0xd0, 0xb7, 0x77, 0x18, 0x39,
	0x41, 0x24, 0xde, 0xde, 0xa9, 0xf8, 0xed, 0xcd, 0x64, 0xfc, 0xed, 0xbd, 0x8c, 0x16, 0x03, 0x77,
	0xe4, 0xdc, 0xcc, 0xa7, 0x57, 0x94, 0xd5, 0x14, 0x89, 0xa1, 0x90, 0x42, 0x89, 0x5d, 0x37, 0x70,
	0x06, 0xc7, 0x85, 0xc7, 0xd0, 0x02, 0x75, 0x06, 0x97, 0x51, 0x96, 0x2f, 0x90, 0xfe, 0x68, 0x18,
	0x46, 0x7c, 0x27, 0xde, 0xe6, 0x70, 0x86, 0x1b, 0xb5, 0x86, 0x61, 0x54, 0xa8, 0xa1, 0x79, 0xc3,
	0x3b, 0xc1, 0x6b, 0x34, 0xcc, 0x74, 0xee, 0xc4, 0xfe, 0x5d, 0x7e, 0xa3, 0xa5, 0x41, 0x84, 0x51,
	0x61, 0x0b, 0x25, 0x77, 0xdc, 0x88, 0x3d, 0xfd, 0xdf, 0x6e, 0xd5, 0xc7, 0x50, 0xca, 0xf4, 0xa3,
	0x86, 0x3f, 0xf5, 0xf6, 0xdf, 0x76, 0xdd, 0x08, 0xa5, 0x77, 0xdc, 0x88, 0xa5, 0x92, 0xc2, 0xb7,
	0x58, 0x1a, 0x45, 0xb4, 0x1c, 0xe7, 0x33, 0x46, 0xfe, 0xc0, 0x89, 0xfc, 0x80, 0x9d, 0x2c, 0x6e,
	0x9c, 0x55, 0xc8, 0x12, 0xcc, 0x74, 0xad, 0x58, 0xd5, 0x64, 0x9a, 0x59, 0xea, 0x29, 0x8c, 0xfc,
	0x09, 0xdf, 0x5d, 0x2c, 0xf5, 0xd4, 0x8d, 0xfc, 0x49, 0x61, 0x8a, 0xd0, 0x8e, 0x1b, 0x35, 0x5d,
	0x67, 0xdf, 0x0d, 0xfe, 0x8d, 0xdd, 0xa6, 0x59, 0x8c, 0xe9, 0xac, 0xd1, 0x62, 0xdb, 0x1d, 0x4f,
	0x7c, 0x7f, 0x54, 0xb8, 0x0b, 0x2d, 0x74, 0x86, 0xde, 0xe1, 0xe9, 0x62, 0x53, 0xa4, 0xc5, 0xc6,
	0xb4, 0xfe, 0x9b, 0x6a, 0x1f, 0x47, 0x8b, 0xea, 0xc8, 0x0d, 0x22, 0x39, 0x97, 0xa9, 0x9c, 0xc9,
	0x65, 0xd2, 0x9d, 0x13, 0x0e, 0x0f, 0x3d, 0x27, 0x9a, 0x06, 0x62, 0x9b, 0x9f, 0x0a, 0x0a, 0x7f,
	0x57, 0x50, 0x82, 0xb8, 0xcf, 0xba, 0x03, 0xd6, 0xc4, 0x38, 0x4e, 0xaf, 0xb2, 0x26, 0xd2, 0x44,
	0x20, 0x5e, 0x45, 0x8b, 0x03, 0x96, 0x4a, 0x89, 0x53, 0xb1, 0x71, 0xc6, 0x2a, 0xae, 0xb5, 0x46,
	0x5c, 0x27, 0xf4, 0x3d, 0x12, 0x1b, 0x14, 0x5e, 0x60, 0xcd, 0x51, 0x09, 0xbd, 0x1c, 0xf6, 0x4c,
	0x4d, 0x6f, 0x18, 0xa6, 0xae, 0xc1, 0x39, 0x8a, 0x6d, 0xb5, 0xd5, 0xb0, 0x48, 0x5b, 0xd7, 0x80,
	0x7e, 0xe1, 0x93, 0x86, 0xb9, 0xab, 0xb6, 0x0c, 0x8d, 0x67, 0x4b, 0xb6, 0xbb, 0x56, 0x4b, 0xb7,
	0x75, 0x98, 0xa7, 0x96, 0x5a, 0xaf, 0xd3, 0x32, 0xea, 0xf4, 0x8e, 0xb5, 0x40, 0xcf, 0x1a, 0xd3,
	0x32, 0xbb, 0xb6, 0x6a, 0x6a, 0x2a, 0xd1, 0x60, 0x91, 0x3e, 0x34, 0xb4, 0x5e, 0xd7, 0x86, 0x04,
	0x3d, 0x6a, 0x0c, 0xb3, 0xdb, 0x6b, 0x34, 0x0c, 0xdd, 0xb4, 0xfb, 0x0d, 0x5d, 0x87, 0x24, 0x7d,
	0x04, 0xb1, 0xef, 0x6d, 0xc7, 0x32, 0x4c, 0x1b, 0x52, 0x85, 0x97, 0x14, 0x84, 0x1a, 0xc3, 0x51,
	0xe4, 0x06, 0x2d, 0x1a, 0x8d, 0xcb, 0x28, 0x71, 0xc0, 0x88, 0x87, 0x89, 0x13, 0xde, 0x40, 0x79,
	0x6f, 0x3a, 0xde, 0x73, 0x83, 0xbe, 0x7f, 0xc0, 0x66, 0xb9, 0x7f, 0x30, 0xf5, 0x78, 0xf2, 0x2f,
	0xfe, 0x34, 0x5d, 0x8a, 0xf5, 0xd6, 0x01, 0x9d, 0xe9, 0x86, 0x50, 0xe2, 0xab, 0x28, 0x13, 0x3d,
	0xef, 0x3a, 0xc7, 0x3c, 0xe3, 0x18, 0x67, 0x9f, 0x11, 0x13, 0xc5, 0x59, 0xc7, 0x65, 0xb4, 0x78,
	0x30, 0x72, 0x0e, 0x43, 0x91, 0xbb, 0x64, 0x50, 0xb8, 0x8a, 0xd2, 0xb1, 0x57, 0xea, 0xfe, 0xfe,
	0x2c, 0xfd, 0xa4, 0x48, 0xe9, 0xa7, 0x1c, 0xca, 0xc4, 0x06, 0xf5, 0x91, 0xeb, 0x04, 0x85, 0x97,
	0xe6, 0x50, 0x26, 0xce, 0x88, 0xc6, 0x69, 0xd7, 0x37, 0x5f, 0xb3, 0xf7, 0xa3, 0xa5, 0x49, 0xe0,
	0x9e, 0x0c, 0xfd, 0x69, 0xd8, 0x67, 0x0b, 0x54, 0x9c, 0xed, 0x42, 0x1a, 0x37, 0x70, 0x15, 0x65,
	0x6e, 0x4f, 0xbc, 0xa2, 0xf1, 0x69, 0xd2, 0xf5, 0xcc, 0x89, 0xbb, 0x70, 0xeb, 0x97, 0x0d, 0xa3,
	0x05, 0x29, 0xf3, 0xca, 0xca, 0x67, 0x4f, 0xcb, 0x9c, 0x38, 0x2d, 0x1f, 0x45, 0x38, 0xf2, 0x23,
	0x67, 0xd4, 0x3f, 0x93, 0x50, 0x4d, 0x32, 0x93, 0x0b, 0x4c, 0x23, 0xa5, 0x12, 0x43, 0x3a, 0x41,
	0x7c, 0x93, 0xa5, 0xd8, 0x26, 0xe3, 0x74, 0x1a, 0xc6, 0x34, 0xf3, 0x94, 0x87, 0xf1, 0x06, 0x4a,
	0x9b, 0xfe, 0xbe, 0xdb, 0x8d, 0x9c, 0xc8, 0xa5, 0x37, 0x8f, 0x43, 0xd7, 0x73, 0xc3, 0xa1, 0x18,
	0x38, 0xbf, 0x79, 0x70, 0x61, 0x3c, 0xee, 0x7b, 0x51, 0x6e, 0x30, 0x0d, 0x02, 0xd7, 0x8b, 0xce,
	0x44, 0x27, 0xcb, 0x85, 0xb1, 0xd1, 0xad, 0xe9, 0xd3, 0xf9, 0xdb, 0xd2, 0xa7, 0x7b, 0x09, 0xf6,
	0x77, 0x46, 0xe5, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x68, 0x63, 0x6e, 0xdb, 0x18, 0x00,
	0x00,
}
